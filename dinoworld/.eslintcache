[{"/home/roman/Documentos/Repo/dinoworld/src/index.js":"1","/home/roman/Documentos/Repo/dinoworld/src/App.js":"2","/home/roman/Documentos/Repo/dinoworld/src/layout/Navbar.js":"3","/home/roman/Documentos/Repo/dinoworld/src/layout/Footer.js":"4","/home/roman/Documentos/Repo/dinoworld/src/pages/Home.js":"5","/home/roman/Documentos/Repo/dinoworld/src/pages/TopDinos.js":"6","/home/roman/Documentos/Repo/dinoworld/src/pages/Dino.js":"7","/home/roman/Documentos/Repo/dinoworld/src/pages/Table.js":"8","/home/roman/Documentos/Repo/dinoworld/src/pages/CardGame.js":"9","/home/roman/Documentos/Repo/dinoworld/src/pages/Favourite.js":"10","/home/roman/Documentos/Repo/dinoworld/src/pages/FormLogIn.js":"11","/home/roman/Documentos/Repo/dinoworld/src/pages/FormSignUp.js":"12","/home/roman/Documentos/Repo/dinoworld/src/pages/EditDino.js":"13","/home/roman/Documentos/Repo/dinoworld/src/components/TopDinosComponent/TopDinosComponent.js":"14","/home/roman/Documentos/Repo/dinoworld/src/components/DinoComponent/DinoComponent.js":"15","/home/roman/Documentos/Repo/dinoworld/src/components/TableComponent/TableComponent.js":"16","/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponent/CardGameComponent.js":"17","/home/roman/Documentos/Repo/dinoworld/src/components/FavouriteComponent/FavouriteComponent.js":"18","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogInComponent.js":"19","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUpComponent.js":"20","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/AddDinoComponent.js":"21","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/HomeComponent.js":"22","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogIn.js":"23","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccessLogIn.js":"24","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUp.js":"25","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccess.js":"26","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/PaginationComponent.js":"27","/home/roman/Documentos/Repo/dinoworld/src/components/DinoCardComponent/DinoCardComponent.js":"28","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/AddDinoForm.js":"29","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/FormSuccessAddDino.js":"30","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormLogIn.js":"31","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormLogIn.js":"32","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormSignUp.js":"33","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormSignUp.js":"34","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/useFormAddDino.js":"35","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/validateFormAddDino.js":"36","/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponent/DinoCardGameComponent.js":"37"},{"size":244,"mtime":1610638756874,"results":"38","hashOfConfig":"39"},{"size":1535,"mtime":1617182684885,"results":"40","hashOfConfig":"39"},{"size":3609,"mtime":1617182687882,"results":"41","hashOfConfig":"39"},{"size":529,"mtime":1616177336399,"results":"42","hashOfConfig":"39"},{"size":1055,"mtime":1617139092972,"results":"43","hashOfConfig":"39"},{"size":587,"mtime":1616615654494,"results":"44","hashOfConfig":"39"},{"size":168,"mtime":1616177519011,"results":"45","hashOfConfig":"39"},{"size":1201,"mtime":1617226010143,"results":"46","hashOfConfig":"39"},{"size":3225,"mtime":1617286627642,"results":"47","hashOfConfig":"39"},{"size":701,"mtime":1616693995959,"results":"48","hashOfConfig":"39"},{"size":319,"mtime":1616521899767,"results":"49","hashOfConfig":"39"},{"size":187,"mtime":1616177997405,"results":"50","hashOfConfig":"39"},{"size":198,"mtime":1616177560629,"results":"51","hashOfConfig":"39"},{"size":427,"mtime":1616178627837,"results":"52","hashOfConfig":"39"},{"size":1880,"mtime":1616693635695,"results":"53","hashOfConfig":"39"},{"size":5174,"mtime":1617224778408,"results":"54","hashOfConfig":"39"},{"size":2106,"mtime":1617285897720,"results":"55","hashOfConfig":"39"},{"size":347,"mtime":1617227387043,"results":"56","hashOfConfig":"39"},{"size":580,"mtime":1617187087302,"results":"57","hashOfConfig":"39"},{"size":423,"mtime":1616325902323,"results":"58","hashOfConfig":"39"},{"size":442,"mtime":1616508019582,"results":"59","hashOfConfig":"39"},{"size":733,"mtime":1617222947070,"results":"60","hashOfConfig":"39"},{"size":1669,"mtime":1616524138952,"results":"61","hashOfConfig":"39"},{"size":237,"mtime":1617185915012,"results":"62","hashOfConfig":"39"},{"size":3643,"mtime":1616693800038,"results":"63","hashOfConfig":"39"},{"size":702,"mtime":1617100649236,"results":"64","hashOfConfig":"39"},{"size":803,"mtime":1617224480279,"results":"65","hashOfConfig":"39"},{"size":2208,"mtime":1617228811474,"results":"66","hashOfConfig":"39"},{"size":6511,"mtime":1616697916569,"results":"67","hashOfConfig":"39"},{"size":219,"mtime":1616508019582,"results":"68","hashOfConfig":"39"},{"size":1833,"mtime":1617271247639,"results":"69","hashOfConfig":"39"},{"size":494,"mtime":1616329809889,"results":"70","hashOfConfig":"39"},{"size":1548,"mtime":1617100631059,"results":"71","hashOfConfig":"39"},{"size":900,"mtime":1616694125688,"results":"72","hashOfConfig":"39"},{"size":2368,"mtime":1616703114208,"results":"73","hashOfConfig":"39"},{"size":772,"mtime":1616693582373,"results":"74","hashOfConfig":"39"},{"size":386,"mtime":1617286337543,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"11cf2xb",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"78"},"/home/roman/Documentos/Repo/dinoworld/src/index.js",[],["160","161"],"/home/roman/Documentos/Repo/dinoworld/src/App.js",[],"/home/roman/Documentos/Repo/dinoworld/src/layout/Navbar.js",["162","163"],"import * as FaIcons from \"react-icons/fa\";\nimport { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./NavbarStyle.css\";\nimport { DinoContext } from \"../App\";\nimport * as AiIcons from \"react-icons/ai\";\nimport * as IconName from \"react-icons/md\";\nimport jwt_decode from \"jwt-decode\";\n\nfunction Navbar() {\n  const { jwt, setJwt } = useContext(DinoContext);\n\n  const SidebarData = [\n    {\n      title: \"Dinos\",\n      path: \"/\",\n      icon: <AiIcons.AiFillHome />,\n      cName: \"nav-text\"\n    },\n    // {\n    //   title: \"Periods\",\n    //   path: \"/Periods\",\n    //   icon: <IconName.MdTimeline />,\n    //   cName: \"nav-text\"\n    // },\n    {\n      title: \"Top Dinos\",\n      path: \"/TopDinos\",\n      icon: <FaIcons.FaTrophy />,\n      cName: \"nav-text\"\n    },\n    {\n      title: \"Table\",\n      path: \"/Table\",\n      icon: <FaIcons.FaTable />,\n      cName: \"nav-text\"\n    },\n    {\n      title: \"CardGame\",\n      path: \"/CardGame\",\n      icon: <FaIcons.FaGamepad />,\n      cName: \"nav-text\"\n    },\n    {\n      title: \"Favourite\",\n      path: \"/Favourite\",\n      icon: <IconName.MdFavorite />,\n      cName: \"nav-text\"\n    },\n    {\n      title: \"EditDino\",\n      path: \"/EditDino\",\n      icon: <FaIcons.FaEdit />,\n      cName: \"nav-text\"\n    }\n  ];\n\n  //Remove token from local storage when \"LogOut\" button is pressed\n  function removeToken() {\n    localStorage.removeItem(\"mitoken\");\n    setJwt(null);\n  }\n\n  const [data, setData] = useState(SidebarData);\n\n  //Depending on if user is logged and if has role ADMIN, we reduce array of data for navbar\n  if (!jwt) {\n    SidebarData.length -= 3;\n  } else {\n    let decoded = jwt_decode(jwt);\n    if (decoded.roles[0] !== \"ROLE_ADMIN\") {\n      SidebarData.length -= 1;\n    }\n  }\n\n  //Declare a state of side bar and give to it value \"false\"\n  const [sidebar, setSidebar] = useState(false);\n\n  //Using useState we change the value of sidebar variable and can show sidebar an close it\n  const showsidebar = () => setSidebar(!sidebar);\n\n  return (\n    <>\n      <div className=\"navbar\">\n        <Link to=\"#\" className=\"menu-bars\">\n          <FaIcons.FaBars onMouseEnter={showsidebar} />\n        </Link>\n        <div className=\"logo\">\n          <Link to=\"/\">\n            <span>dinoworld</span>\n          </Link>\n        </div>\n        {jwt ? (\n          <div className=\"logIn\">\n            <Link to=\"/\">\n              <button onClick={() => removeToken()}>\n                <span>Log Out</span>\n              </button>\n            </Link>\n          </div>\n        ) : (\n          <div className=\"logIn\">\n            <Link to=\"/FormLogIn\">\n              <button>\n                <span>Log In</span>\n              </button>\n            </Link>\n            <Link to=\"/FormSignUp\">\n              <button>\n                <span>Sign Up</span>\n              </button>\n            </Link>\n          </div>\n        )}\n      </div>\n\n      {/* Changes a class depending of a state of side bar */}\n\n      <nav className={sidebar ? \"nav-menu active\" : \"nav-menu\"}>\n        <ul\n          className=\"nav-menu-items\"\n          onClick={showsidebar} /*</nav>onMouseLeave={showsidebar}*/\n        >\n          {/* The \"map\" method from stored data made a bunch of links for a sidebar */}\n          {SidebarData.map((item, index) => {\n            return (\n              <li key={index} className={item.cName}>\n                <Link to={item.path}>\n                  {item.icon}\n                  <span>{item.title}</span>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n    </>\n  );\n}\n\nexport default Navbar;\n","/home/roman/Documentos/Repo/dinoworld/src/layout/Footer.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Home.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/TopDinos.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Dino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Table.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/CardGame.js",["164","165","166"],"/home/roman/Documentos/Repo/dinoworld/src/pages/Favourite.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/FormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/FormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/EditDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/TopDinosComponent/TopDinosComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/DinoComponent/DinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/TableComponent/TableComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponent/CardGameComponent.js",["167"],"import DinoCardGameComponent from \"./DinoCardGameComponent\";\nimport \"./CardGame.css\";\nimport { useState } from \"react\";\n\nexport default function CardGameComponent({\n  dinos,\n  visibleDinos,\n  setVisibleDinos,\n  finishedDinos,\n  checkForMatch\n}) {\n  // console.log(dinos);\n  return (\n    <div>\n      <div className=\"grid-container\">\n        {dinos.map((dino, index) => (\n          <DinoCardGameComponent\n            key={dino.id}\n            className={`${\n              visibleDinos.includes(index) ? \"grid-game-card-open\" : \"\"\n            }\n          ${\n            finishedDinos.includes(index)\n              ? \"grid-game-card-open grid-card-finished\"\n              : \"\"\n          }`}\n            onClick={() => {\n              console.log(\"I'm clicked\");\n              if (!finishedDinos.includes(index)) {\n                //chek if finishedDino doesn't include index of current dino\n                switch (visibleDinos.length) {\n                  case 0:\n                    setVisibleDinos([index]); //Assign to oppend cards array (visibleDinos) index of current dino if it is empty\n                    break;\n                  case 1: // If oppend cards array has one element we check if it has the same index of current dino that being processed\n                    if (visibleDinos[0] !== index) {\n                      setVisibleDinos(visibleDinos.concat(index)); //if doesn't include we concat that index to the oppend card array\n\n                      //Invoked the function for check if indexes are equal by passing first element of visibleDinos array\n                      //as first argument and current index of beimg processed dino as second argument\n                      checkForMatch(visibleDinos[0], index);\n                    }\n                    break;\n                  case 2:\n                    setVisibleDinos([index]);\n                    break;\n                  default:\n                    setVisibleDinos([]);\n                }\n              }\n            }}\n            img={dino.img}\n            name={dino.name}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","/home/roman/Documentos/Repo/dinoworld/src/components/FavouriteComponent/FavouriteComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogInComponent.js",["168"],"import { useState } from \"react\";\nimport Home from \"../../pages/Home\";\nimport FormLogIn from \"./FormLogIn\";\nimport FormSuccessLogIn from \"./FormSuccessLogIn\";\n// import FormSuccessLogIn from \"./FormSuccessLogIn\";\n\nconst FormLogInComponent = () => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  function submitForm() {\n    setIsSubmitted(true);\n  }\n\n  return (\n    <div>\n      {!isSubmitted ? (\n        <FormLogIn submitForm={submitForm} />\n      ) : (\n        <FormSuccessLogIn />\n        // <Home />\n      )}\n    </div>\n  );\n};\n\nexport default FormLogInComponent;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUpComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/AddDinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/HomeComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccessLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccess.js",["169"],"import React from \"react\";\nimport { urlApi } from \"../../App\";\n\n// import { values } from \"./useFormSignUp\";\n\nfunction FormSuccess() {\n  // console.log(values);\n  // fetch(`${urlApi}/register/user`, {\n  //   method: \"POST\",\n  //   cors: \"CORS\",\n  //   headers: {\n  //     \"Content-Type\": \"application/json\"\n  //   },\n  //   body: JSON.stringify(values)\n  // }).then(response =>\n  //   response\n  //     .json()\n  //     .then(response => {\n  //       console.log(response);\n  //     })\n  //     .catch(error => console.log(\"Erorr: \", error))\n  // );\n\n  return (\n    <div>\n      <div>Thanks for create your account</div>\n      <img src=\"\" alt=\"success\" />\n    </div>\n  );\n}\n\nexport default FormSuccess;\n","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/PaginationComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/DinoCardComponent/DinoCardComponent.js",["170"],"import { useContext } from \"react\";\nimport * as IconName from \"react-icons/md\";\nimport { Link } from \"react-router-dom\";\nimport { urlApi, DinoContext } from \"../../App\";\nimport jwt_decode from \"jwt-decode\";\n\nexport default function DinoCardComponent({\n  ID,\n  name,\n  weight,\n  height,\n  lenght,\n  diet,\n  top_speed,\n  period,\n  img,\n  continent,\n  users\n}) {\n  const { jwt } = useContext(DinoContext);\n\n  // let decoded = jwt_decode(jwt);\n  // console.log(decoded.username);\n  // console.log(users);\n\n  function toggleDinosaur() {\n    if (users.length !== 0) {\n      fetch(`${urlApi}/favorite/remove/${ID}`, {\n        method: \"DELETE\",\n        mode: \"cors\",\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      })\n        .then(response => response.json())\n\n        .catch(error => console.log(error));\n\n      console.log(\"dino has been added\" + ID);\n    } else {\n      fetch(`${urlApi}/favorite/add/${ID}`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      })\n        .then(response => response.json())\n\n        .catch(error => console.log(error));\n\n      console.log(\"dino has been deleted\" + ID);\n    }\n  }\n\n  return (\n    <div className=\"grid-card\">\n      {/* Using Link with path indicated in route in App.js we open the Dino.js with selected dino ID in URL*/}\n\n      <Link\n        to={`/Dino/${ID}`}\n        style={{ textDecoration: \"none\", color: \"rgb(53, 53, 53)\" }}\n      >\n        <img src={`${urlApi}/images/${img}`} alt=\"\" />\n        <h3>{name}</h3>\n        <h6>Weight: {weight} kilograms</h6>\n        <h6>Height: {height} meters</h6>\n        <h6>Length: {lenght} meters</h6>\n        <h6>Diet: {diet.name}</h6>\n        <h6>Top Speed: {top_speed} km/h</h6>\n        <h6>Period: {period.name}</h6>\n        <h6>Continent: {continent.name}</h6>\n      </Link>\n\n      <button\n        className={\n          jwt\n            ? \"buttonFovorite\"\n            : \"displayNone\" /*,\n          users.length === 0\n            ? \"buttonFovoriteInActive\"\n            : \"buttonFovoriteActive\"*/\n        }\n        onClick={() => toggleDinosaur()}\n      >\n        <IconName.MdFavorite />\n      </button>\n    </div>\n  );\n}\n","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/AddDinoForm.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/FormSuccessAddDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormLogIn.js",["171"],"import { useState, useEffect } from \"react\";\n// import jwt_decode from \"jwt-decode\";\nimport { urlApi } from \"../../App\";\nimport { DinoContext } from \"../../App\";\nimport { useContext } from \"react\";\n\n//Creating a custom hook for form validation\n\nconst useForm = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    username: \"\",\n    password: \"\"\n  });\n\n  const { setJwt } = useContext(DinoContext);\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n    setErrors(validateForm(values));\n    setIsSubmitting(true);\n    // console.log(values);\n\n    fetch(`${urlApi}/login`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(\"Respuesta: \", response);\n          if (response.code === 401) {\n            alert(\"Invalid email or password\"); // Need to add some validation here\n          } else {\n            localStorage.setItem(\"mitoken\", response.token);\n            // const decoded = jwt_decode(response.token);\n\n            setJwt(response.token);\n          }\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useForm;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormSignUp.js",["172"],"import { useState, useEffect } from \"react\";\nimport { urlApi } from \"../../App\";\n// import jwt_decode from \"jwt-decode\";\n\n//Creating a custom hook for form validation\n\nconst useFormSignUp = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    name: \"\",\n    lastname: \"\",\n    birthdate: \"\",\n    username: \"\",\n    password: \"\",\n    passwordConfirm: \"\"\n  });\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    setErrors(validateForm(values));\n    setIsSubmitting(true);\n\n    console.log(values);\n\n    fetch(`${urlApi}/register/user`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormSignUp;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/useFormAddDino.js",["173"],"import { useState, useEffect } from \"react\";\nimport { urlApi } from \"../../App\";\n\n//Creating a custom hook for form validation\n\nconst useFormAddDino = (callback, validateFormAddDino) => {\n  const [values, setValues] = useState({\n    name: \"\",\n    weight: \"\",\n    height: \"\",\n    lenght: \"\",\n    top_speed: \"\",\n    period: \"\",\n    diet: \"\",\n    continent: \"\",\n    top: \"\",\n    info: \"\",\n    img: []\n  });\n\n  //\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  //Handlind form inserts and set them to the values\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  //Handling inserted file (img)\n\n  const handleFile = e => {\n    // console.log(values);\n    // console.log(e.target);\n    const { name, files } = e.target;\n    // console.log(name, files);\n    setValues({\n      ...values,\n      [name]: files[0]\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    setErrors(validateFormAddDino(values));\n    setIsSubmitting(true);\n\n    const formData = new FormData();\n    formData.append(\"name\", values.name);\n    formData.append(\"weight\", values.weight);\n    formData.append(\"height\", values.height);\n    formData.append(\"lenght\", values.lenght);\n    formData.append(\"top_speed\", values.top_speed);\n    formData.append(\"period\", values.period);\n    formData.append(\"diet\", values.diet);\n    formData.append(\"continent\", values.continent);\n    formData.append(\"top\", values.top);\n    formData.append(\"info\", values.info);\n    formData.append(\"img\", values.img);\n\n    console.log(formData);\n\n    fetch(`${urlApi}/register/dinosaur`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      body: formData\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleFile, handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormAddDino;\n","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/validateFormAddDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponent/DinoCardGameComponent.js",["174"],"import { urlApi } from \"../../App\";\nimport { useState } from \"react\";\nimport \"./CardGame.css\";\n\nexport default function DinoCardGameComponent({ img, onClick, className }) {\n  return (\n    <div className={`grid-game-card ${className}`} onClick={onClick}>\n      <img\n        className=\"grid-game-card-img\"\n        src={`${urlApi}/images/${img}`}\n        alt=\"\"\n      />\n    </div>\n  );\n}\n",{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":64,"column":10,"nodeType":"181","messageId":"182","endLine":64,"endColumn":14},{"ruleId":"179","severity":1,"message":"183","line":64,"column":16,"nodeType":"181","messageId":"182","endLine":64,"endColumn":23},{"ruleId":"179","severity":1,"message":"184","line":11,"column":10,"nodeType":"181","messageId":"182","endLine":11,"endColumn":18},{"ruleId":"179","severity":1,"message":"185","line":11,"column":20,"nodeType":"181","messageId":"182","endLine":11,"endColumn":31},{"ruleId":"186","severity":1,"message":"187","line":76,"column":6,"nodeType":"188","endLine":76,"endColumn":21,"suggestions":"189"},{"ruleId":"179","severity":1,"message":"190","line":3,"column":10,"nodeType":"181","messageId":"182","endLine":3,"endColumn":18},{"ruleId":"179","severity":1,"message":"191","line":2,"column":8,"nodeType":"181","messageId":"182","endLine":2,"endColumn":12},{"ruleId":"179","severity":1,"message":"192","line":2,"column":10,"nodeType":"181","messageId":"182","endLine":2,"endColumn":16},{"ruleId":"179","severity":1,"message":"193","line":5,"column":8,"nodeType":"181","messageId":"182","endLine":5,"endColumn":18},{"ruleId":"186","severity":1,"message":"194","line":68,"column":6,"nodeType":"188","endLine":68,"endColumn":14,"suggestions":"195"},{"ruleId":"186","severity":1,"message":"194","line":63,"column":6,"nodeType":"188","endLine":63,"endColumn":14,"suggestions":"196"},{"ruleId":"186","severity":1,"message":"194","line":92,"column":6,"nodeType":"188","endLine":92,"endColumn":14,"suggestions":"197"},{"ruleId":"179","severity":1,"message":"190","line":2,"column":10,"nodeType":"181","messageId":"182","endLine":2,"endColumn":18},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'setData' is assigned a value but never used.","'duration' is assigned a value but never used.","'setDuration' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dinos.length'. Either include it or remove the dependency array.","ArrayExpression",["200"],"'useState' is defined but never used.","'Home' is defined but never used.","'urlApi' is defined but never used.","'jwt_decode' is defined but never used.","React Hook useEffect has missing dependencies: 'callback' and 'isSubmitting'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["201"],["202"],["203"],"no-global-assign","no-unsafe-negation",{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"206","fix":"208"},{"desc":"206","fix":"209"},"Update the dependencies array to be: [dinos.length, finishedDinos]",{"range":"210","text":"211"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"212","text":"213"},{"range":"214","text":"213"},{"range":"215","text":"213"},[2509,2524],"[dinos.length, finishedDinos]",[1736,1744],"[callback, errors, isSubmitting]",[1445,1453],[2252,2260]]