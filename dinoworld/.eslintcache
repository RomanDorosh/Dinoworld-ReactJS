[{"/home/roman/Documentos/Repo/dinoworld/src/index.js":"1","/home/roman/Documentos/Repo/dinoworld/src/App.js":"2","/home/roman/Documentos/Repo/dinoworld/src/layout/Navbar.js":"3","/home/roman/Documentos/Repo/dinoworld/src/layout/Footer.js":"4","/home/roman/Documentos/Repo/dinoworld/src/pages/Home.js":"5","/home/roman/Documentos/Repo/dinoworld/src/pages/TopDinos.js":"6","/home/roman/Documentos/Repo/dinoworld/src/pages/Dino.js":"7","/home/roman/Documentos/Repo/dinoworld/src/pages/Table.js":"8","/home/roman/Documentos/Repo/dinoworld/src/pages/CardGame.js":"9","/home/roman/Documentos/Repo/dinoworld/src/pages/Periods.js":"10","/home/roman/Documentos/Repo/dinoworld/src/pages/Favourite.js":"11","/home/roman/Documentos/Repo/dinoworld/src/pages/FormLogIn.js":"12","/home/roman/Documentos/Repo/dinoworld/src/pages/FormSignUp.js":"13","/home/roman/Documentos/Repo/dinoworld/src/pages/EditDino.js":"14","/home/roman/Documentos/Repo/dinoworld/src/layout/SidebarData.js":"15","/home/roman/Documentos/Repo/dinoworld/src/components/TopDinosComponent/TopDinosComponent.js":"16","/home/roman/Documentos/Repo/dinoworld/src/components/DinoComponent/DinoComponent.js":"17","/home/roman/Documentos/Repo/dinoworld/src/components/TableComponent/TableComponent.js":"18","/home/roman/Documentos/Repo/dinoworld/src/components/PeriodsComponent/PeriodsComponent.js":"19","/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponent/CardGameComponent.js":"20","/home/roman/Documentos/Repo/dinoworld/src/components/FavouriteComponent/FavouriteComponent.js":"21","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogInComponent.js":"22","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUpComponent.js":"23","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/AddDinoComponent.js":"24","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/HomeComponent.js":"25","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogIn.js":"26","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccessLogIn.js":"27","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUp.js":"28","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccess.js":"29","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/PaginationComponent.js":"30","/home/roman/Documentos/Repo/dinoworld/src/components/DinoCardComponent/DinoCardComponent.js":"31","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/AddDinoForm.js":"32","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/FormSuccessAddDino.js":"33","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormLogIn.js":"34","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormLogIn.js":"35","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormSignUp.js":"36","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormSignUp.js":"37","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/useFormAddDino.js":"38","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/validateFormAddDino.js":"39"},{"size":244,"mtime":1610638756874,"results":"40","hashOfConfig":"41"},{"size":1676,"mtime":1616604039180,"results":"42","hashOfConfig":"41"},{"size":3397,"mtime":1616616723228,"results":"43","hashOfConfig":"41"},{"size":529,"mtime":1616177336399,"results":"44","hashOfConfig":"41"},{"size":1032,"mtime":1616508019582,"results":"45","hashOfConfig":"41"},{"size":587,"mtime":1616615654494,"results":"46","hashOfConfig":"41"},{"size":168,"mtime":1616177519011,"results":"47","hashOfConfig":"41"},{"size":1103,"mtime":1616527221858,"results":"48","hashOfConfig":"41"},{"size":318,"mtime":1616178108940,"results":"49","hashOfConfig":"41"},{"size":307,"mtime":1616178212730,"results":"50","hashOfConfig":"41"},{"size":706,"mtime":1616613377702,"results":"51","hashOfConfig":"41"},{"size":319,"mtime":1616521899767,"results":"52","hashOfConfig":"41"},{"size":187,"mtime":1616177997405,"results":"53","hashOfConfig":"41"},{"size":198,"mtime":1616177560629,"results":"54","hashOfConfig":"41"},{"size":915,"mtime":1616615402044,"results":"55","hashOfConfig":"41"},{"size":427,"mtime":1616178627837,"results":"56","hashOfConfig":"41"},{"size":1888,"mtime":1616610693020,"results":"57","hashOfConfig":"41"},{"size":1432,"mtime":1616177261318,"results":"58","hashOfConfig":"41"},{"size":241,"mtime":1616177213315,"results":"59","hashOfConfig":"41"},{"size":187,"mtime":1616176774661,"results":"60","hashOfConfig":"41"},{"size":373,"mtime":1616613730648,"results":"61","hashOfConfig":"41"},{"size":526,"mtime":1616531073600,"results":"62","hashOfConfig":"41"},{"size":423,"mtime":1616325902323,"results":"63","hashOfConfig":"41"},{"size":442,"mtime":1616508019582,"results":"64","hashOfConfig":"41"},{"size":919,"mtime":1616178470228,"results":"65","hashOfConfig":"41"},{"size":1669,"mtime":1616524138952,"results":"66","hashOfConfig":"41"},{"size":204,"mtime":1616330404495,"results":"67","hashOfConfig":"41"},{"size":4488,"mtime":1616508019582,"results":"68","hashOfConfig":"41"},{"size":204,"mtime":1616330361183,"results":"69","hashOfConfig":"41"},{"size":718,"mtime":1616178571706,"results":"70","hashOfConfig":"41"},{"size":1527,"mtime":1616610799734,"results":"71","hashOfConfig":"41"},{"size":6160,"mtime":1616508019582,"results":"72","hashOfConfig":"41"},{"size":219,"mtime":1616508019582,"results":"73","hashOfConfig":"41"},{"size":1849,"mtime":1616603853691,"results":"74","hashOfConfig":"41"},{"size":494,"mtime":1616329809889,"results":"75","hashOfConfig":"41"},{"size":1540,"mtime":1616527505487,"results":"76","hashOfConfig":"41"},{"size":900,"mtime":1616524105290,"results":"77","hashOfConfig":"41"},{"size":1786,"mtime":1616508019582,"results":"78","hashOfConfig":"41"},{"size":707,"mtime":1616508019582,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"11cf2xb",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"82"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"/home/roman/Documentos/Repo/dinoworld/src/index.js",[],["169","170"],"/home/roman/Documentos/Repo/dinoworld/src/App.js",[],"/home/roman/Documentos/Repo/dinoworld/src/layout/Navbar.js",["171"],"/home/roman/Documentos/Repo/dinoworld/src/layout/Footer.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Home.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/TopDinos.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Dino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Table.js",["172","173"],"import TableComponent from \"../components/TableComponent/TableComponent\";\nimport { useContext, createContext, useState, useEffect } from \"react\";\nimport { DinoContext, urlApi } from \"../App\";\n\nexport const DinoTableContext = createContext({});\n\nexport default function Table() {\n  // const { dinos } = useContext(DinoContext);\n\n  const [dinos, setDinos] = useState([]);\n\n  useEffect(() => {\n    fetch(`${urlApi}/dinosaur/`)\n      .then(response => response.json())\n      .then(data => setDinos(data))\n      .catch(err => console.log(err));\n  }, []);\n\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  function search(dinosRows) {\n    return dinosRows.filter(\n      dino => dino.name.toLowerCase().indexOf(searchInput) > -1\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"container-fluid\">\n        <input\n          className=\"form-control me-2\"\n          type=\"search\"\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n          onChange={e => setSearchInput(e.target.value.toLowerCase())}\n        />\n      </div>\n      <TableComponent dinos={search(dinos)} />\n    </div>\n  );\n}\n","/home/roman/Documentos/Repo/dinoworld/src/pages/CardGame.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Periods.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Favourite.js",["174","175"],"import React, { useState, useContext, useEffect } from \"react\";\nimport FavouriteComponent from \"../components/FavouriteComponent/FavouriteComponent\";\nimport { urlApi, DinoContext } from \"../App\";\n\nexport default function Favourite() {\n  const [dinos, setDinos] = useState([]);\n\n  const { jwt, setJwt } = useContext(DinoContext);\n\n  useEffect(() => {\n    fetch(`${urlApi}/favorite/`, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      }\n    })\n      .then(response => response.json())\n      .then(data => setDinos(data))\n      .catch(err => console.log(err));\n  }, []);\n\n  return (\n    <div>\n      <FavouriteComponent dinos={dinos} />\n    </div>\n  );\n}\n","/home/roman/Documentos/Repo/dinoworld/src/pages/FormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/FormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/EditDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/layout/SidebarData.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/TopDinosComponent/TopDinosComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/DinoComponent/DinoComponent.js",["176"],"import { useParams } from \"react-router-dom\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport * as IconName from \"react-icons/md\";\nimport \"./DinoComponent.css\";\nimport { urlApi, DinoContext } from \"../../App\";\n\nfunction DinoComponent() {\n  const { ID } = useParams();\n\n  const { jwt, setJwt } = useContext(DinoContext);\n\n  const [dino, setDino] = useState([]);\n\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    fetch(`${urlApi}/dinosaur/${ID}`)\n      .then(resp => resp.json())\n      .then(resp => {\n        setDino(resp);\n        setIsLoaded(true);\n      })\n      .catch(err => console.log(err));\n  }, [ID]);\n\n  function addDinosaur() {\n    console.log(\"dino has been added\" + ID);\n\n    fetch(`${urlApi}/favorite/add/${ID}`, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      }\n    })\n      .then(response => response.json())\n\n      .catch(error => console.log(error));\n  }\n\n  return (\n    <div className=\"dinoAbout\">\n      {/* Get image of dino from a folder using property \"img\" where is saved name of file with that exact dino */}\n      <img src={`${urlApi}/images/${dino.img}`} alt=\"\" />\n      <div className=\"dino-char\">\n        <h3>{dino.name}</h3>\n        <h6>Weight: {dino.weight} kilograms</h6>\n        <h6>Height: {dino.height} meters</h6>\n        <h6>Length: {dino.lenght} meters</h6>\n        <h6>Diet: {isLoaded && dino.diet.name}</h6>\n        <h6>Top Speed: {dino.top_speed} km/h</h6>\n        <h6>Period: {isLoaded && dino.period.name}</h6>\n        <h6>Continent: {isLoaded && dino.continent.name}</h6>\n        <button\n          className={jwt ? \"buttonFovorite\" : \"displayNone\"}\n          onClick={() => addDinosaur()}\n        >\n          <IconName.MdFavorite />\n        </button>\n      </div>\n      <p>{dino.info}</p>\n    </div>\n  );\n}\n\nexport default DinoComponent;\n","/home/roman/Documentos/Repo/dinoworld/src/components/TableComponent/TableComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/PeriodsComponent/PeriodsComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponent/CardGameComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FavouriteComponent/FavouriteComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogInComponent.js",["177"],"import { useState } from \"react\";\nimport Home from \"../../pages/Home\";\nimport FormLogIn from \"./FormLogIn\";\nimport FormSuccessLogIn from \"./FormSuccessLogIn\";\n\nconst FormLogInComponent = () => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  function submitForm() {\n    setIsSubmitted(true);\n  }\n\n  return (\n    <div>\n      {!isSubmitted ? (\n        <FormLogIn submitForm={submitForm} />\n      ) : (\n        // <FormSuccessLogIn />\n        <Home />\n      )}\n    </div>\n  );\n};\n\nexport default FormLogInComponent;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUpComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/AddDinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/HomeComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccessLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUp.js",["178"],"import \"./Form.css\";\nimport useFormSignUp from \"./useFormSignUp\";\nimport validateFormSignUp from \"./validateFormSignUp\";\nimport jwt_decode from \"jwt-decode\";\n\nconst FormSignUp = ({ submitForm }) => {\n  const { handleChange, values, handleSubmit, errors } = useFormSignUp(\n    submitForm,\n    validateFormSignUp\n  );\n\n  // const config = {\n  //   method: \"POST\",\n  //   mode: \"cors\",\n  //   headers: {\n  //     \"Content-Type\": \"application/json\"\n  //   },\n  //   body: JSON.stringify({\n  //     username: \"mark@mail.com\",\n  //     password: \"dino\"\n  //   })\n  // };\n  // // const request = new Request(\"http://localhost:8000/login\", config);\n  // fetch(\"http://localhost:8000/login\", config).then(response =>\n  //   response\n  //     .json()\n  //     .then(response => {\n  //       console.log(\"Respuesta ok: \", response);\n  //       localStorage.setItem(\"mitoken\", response.token);\n\n  //       const decoded = jwt_decode(response.token);\n  //       console.log(decoded);\n\n  //       var decodedHeader = jwt_decode(response.token, { header: true });\n  //       console.log(decodedHeader);\n  //     })\n  //     .catch(error => console.log(\"Erorr: \", error))\n  // );\n\n  return (\n    <div className=\"form-content\">\n      <form action=\"\" onSubmit={handleSubmit}>\n        <h1>Begin your journey in DinoWord by creating an account</h1>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"name\" className=\"form-label\">\n            Your name\n          </label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            className=\"input-field\"\n            placeholder=\"Enter your name\"\n            value={values.name}\n            onChange={handleChange}\n          />\n          {/* If value of property name is empty it will return value \n          of \"name\" property of \"errors\" object inside of parragraph. \n          The same for every input field*/}\n          {errors.name && <p>{errors.name}</p>}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"lastname\" className=\"form-label\">\n            Your lastname\n          </label>\n          <input\n            id=\"lastname\"\n            type=\"text\"\n            name=\"lastname\"\n            className=\"input-field\"\n            placeholder=\"Enter your lastname\"\n            value={values.lastname}\n            onChange={handleChange}\n          />\n          {errors.lastname && <p>{errors.lastname}</p>}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"birthdate\" className=\"form-label\">\n            Your birthdate\n          </label>\n          <input\n            id=\"birthdate\"\n            type=\"date\"\n            name=\"birthdate\"\n            className=\"input-field\"\n            placeholder=\"Enter your birthdate\"\n            value={values.birthdate}\n            onChange={handleChange}\n          />\n          {errors.birthdate && <p>{errors.birthdate}</p>}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"email\" className=\"form-label\">\n            Your email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            name=\"username\"\n            className=\"input-field\"\n            placeholder=\"Enter your email\"\n            value={values.email}\n            onChange={handleChange}\n          />\n          {errors.email && <p>{errors.email}</p>}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"password\" className=\"form-label\">\n            Your password\n          </label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            className=\"input-field\"\n            placeholder=\"Enter your password\"\n            value={values.password}\n            onChange={handleChange}\n          />\n          {errors.password && <p>{errors.password}</p>}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"passwordConfirm\" className=\"form-label\">\n            Repeat password\n          </label>\n          <input\n            id=\"passwordConfirm\"\n            type=\"password\"\n            name=\"passwordConfirm\"\n            className=\"input-field\"\n            placeholder=\"Repeat your password\"\n            value={values.passwordConfirm}\n            onChange={handleChange}\n          />\n          {errors.passwordConfirm && <p>{errors.passwordConfirm}</p>}\n        </div>\n        <button type=\"submit\">Sign Up</button>\n      </form>\n    </div>\n  );\n};\n\nexport default FormSignUp;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccess.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/PaginationComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/DinoCardComponent/DinoCardComponent.js",["179"],"import { useContext } from \"react\";\nimport * as IconName from \"react-icons/md\";\nimport { Link } from \"react-router-dom\";\nimport { urlApi, DinoContext } from \"../../App\";\n\nexport default function DinoCardComponent({\n  ID,\n  name,\n  weight,\n  height,\n  lenght,\n  diet,\n  top_speed,\n  period,\n  img,\n  continent\n}) {\n  const { jwt, setJwt } = useContext(DinoContext);\n\n  function addDinosaur() {\n    console.log(\"dino has been added\" + ID);\n\n    fetch(`${urlApi}/favorite/add/${ID}`, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      }\n    })\n      .then(response => response.json())\n\n      .catch(error => console.log(error));\n  }\n\n  return (\n    <div className=\"grid-card\">\n      {/* Using Link with path indicated in route in App.js we open the Dino.js with selected dino ID in URL*/}\n\n      <Link\n        to={`/Dino/${ID}`}\n        style={{ textDecoration: \"none\", color: \"rgb(53, 53, 53)\" }}\n      >\n        <img src={`${urlApi}/images/${img}`} alt=\"\" />\n        <h3>{name}</h3>\n        <h6>Weight: {weight} kilograms</h6>\n        <h6>Height: {height} meters</h6>\n        <h6>Length: {lenght} meters</h6>\n        <h6>Diet: {diet.name}</h6>\n        <h6>Top Speed: {top_speed} km/h</h6>\n        <h6>Period: {period.name}</h6>\n        <h6>Continent: {continent.name}</h6>\n      </Link>\n\n      <button\n        className={jwt ? \"buttonFovorite\" : \"displayNone\"}\n        onClick={() => addDinosaur()}\n      >\n        <IconName.MdFavorite />\n      </button>\n    </div>\n  );\n}\n","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/AddDinoForm.js",["180","181","182","183"],"import React from \"react\";\nimport { urlApi } from \"../../App\";\nimport \"../FormComponents/Form.css\";\nimport useFormAddDino from \"./useFormAddDino\";\nimport validateFormAddDino from \"./validateFormAddDino\";\n\n\n\nexport default function AddDinoForm({submitForm}) {\n  const { handleChange, values, handleSubmit, errors } = useFormAddDino(\n    submitForm,\n    validateFormAddDino\n  );\n\n\n\n\n  // const token = localStorage.getItem(\"mitoken\");\n\n  // const config = {\n  //   headers: {\n  //     Authorization: `Bearer ${token}`\n  //   }\n  // };\n\n  // fetch(`${urlApi}/dinosaur`, config)\n  //   .then(res => res.json())\n  //   .then(res => console.log(res))\n  //   .catch(err => console.log(\"Error: \", err));\n\n  return (\n    <div className=\"form-content\">\n      <form action=\"\" onSubmit={handleSubmit}>\n        <h1>Create a new dino in few steps</h1>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"name\" className=\"form-label\">\n            Dinosaur name\n          </label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            className=\"input-field\"\n            placeholder=\"Enter dino name\"\n            //   value={values.name}\n            //   onChange={handleChange}\n          />\n          {/* If value of property name is empty it will return value \n          of \"name\" property of \"errors\" object inside of parragraph. \n          The same for every input field*/}\n          {/* {errors.name && <p>{errors.name}</p>} */}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"weight\" className=\"form-label\">\n            Weight of dinosaur\n          </label>\n          <input\n            id=\"weight\"\n            type=\"text\" // maybe need to change to a number?\n            name=\"weight\"\n            className=\"input-field\"\n            placeholder=\"Enter weight of dino\"\n            //   value={values.lastname}\n            //   onChange={handleChange}\n          />\n          {/* {errors.lastname && <p>{errors.lastname}</p>} */}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"height\" className=\"form-label\">\n            Height of dinosaur\n          </label>\n          <input\n            id=\"height\"\n            type=\"text\" // maybe need to change to a number?\n            name=\"height\"\n            className=\"input-field\"\n            placeholder=\"Enter height of dino\"\n            //   value={values.birthdate}\n            //   onChange={handleChange}\n          />\n          {/* {errors.birthdate && <p>{errors.birthdate}</p>} */}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"lenght\" className=\"form-label\">\n            Enter length of dinosaur\n          </label>\n          <input\n            id=\"lenght\"\n            type=\"email\" // maybe need to change to a number?\n            name=\"lenght\"\n            className=\"input-field\"\n            placeholder=\"Enter length of dino\"\n            //   value={values.email}\n            //   onChange={handleChange}\n          />\n          {/* {errors.email && <p>{errors.email}</p>} */}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"top_speed\" className=\"form-label\">\n            Enter top speed of dinosaur\n          </label>\n          <input\n            id=\"top_speed\"\n            type=\"text\" // maybe need to change to a number?\n            name=\"top_speed\"\n            className=\"input-field\"\n            placeholder=\"Enter top speed of dinos\"\n            //   value={values.password}\n            //   onChange={handleChange}\n          />\n          {/* {errors.password && <p>{errors.password}</p>} */}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"period\" className=\"form-label\">\n            Choose period when lived dinosaur:\n          </label>\n          <select\n            id=\"period\"\n            name=\"period\"\n            className=\"input-field\"\n            //   value={values.passwordConfirm}\n            //   onChange={handleChange}\n          >\n            <option value=\"1\">Triassic</option>\n            <option value=\"2\">Jurasic</option>\n            <option value=\"3\">Cretaceous</option>\n          </select>\n          {/* {errors.passwordConfirm && <p>{errors.passwordConfirm}</p>} */}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"diet\" className=\"form-label\">\n            Choose diet of dinosaur:\n          </label>\n          <select\n            id=\"diet\"\n            name=\"diet\"\n            className=\"input-field\"\n            //   value={values.passwordConfirm}\n            //   onChange={handleChange}\n          >\n            <option value=\"1\">Carnivore</option>\n            <option value=\"2\">Herbivore</option>\n            <option value=\"3\">Piscivore</option>\n          </select>\n          {/* {errors.passwordConfirm && <p>{errors.passwordConfirm}</p>} */}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"continent\" className=\"form-label\">\n            Choose continent where was found dinosaur:\n          </label>\n          <select\n            id=\"continent\"\n            name=\"continent\"\n            className=\"input-field\"\n            //   value={values.passwordConfirm}\n            //   onChange={handleChange}\n          >\n            <option value=\"1\">South America</option>\n            <option value=\"2\">North America</option>\n            <option value=\"3\">Europe</option>\n            <option value=\"4\">Asia</option>\n            <option value=\"5\">Africa</option>\n            <option value=\"6\">Australia</option>\n          </select>\n          {/* {errors.passwordConfirm && <p>{errors.passwordConfirm}</p>} */}\n        </div>\n        <div className=\"form-inputs\">\n          <label htmlFor=\"img\" className=\"form-label\">\n            Add an awesome image of dinosaur\n          </label>\n          <input\n            className=\"form-control-file mb-3\"\n            type=\"file\"\n            name=\"img\"\n            // onChange={handleFile}\n          />\n          {/* {errors.passwordConfirm && <p>{errors.passwordConfirm}</p>} */}\n        </div>\n        <button type=\"submit\">Add new dinosaur</button>\n      </form>\n    </div>\n  );\n}\n","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/FormSuccessAddDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormLogIn.js",["184","185","186"],"import { useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { urlApi } from \"../../App\";\nimport { DinoContext } from \"../../App\";\nimport { useContext } from \"react\";\n\n//Creating a custom hook for form validation\n\nconst useForm = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    username: \"\",\n    password: \"\"\n  });\n\n  const { jwt, setJwt } = useContext(DinoContext);\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n    console.log(errors);\n    setErrors(validateForm(values));\n    setIsSubmitting(true);\n    // console.log(errors);\n    console.log(values);\n\n    fetch(`${urlApi}/login`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(\"Respuesta: \", response);\n          if (response.code === 401) {\n            alert(\"Invalid email or password\");\n          } else {\n            localStorage.setItem(\"mitoken\", response.token);\n            // const decoded = jwt_decode(response.token);\n\n            setJwt(response.token);\n          }\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useForm;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormSignUp.js",["187","188"],"import { useState, useEffect } from \"react\";\nimport { urlApi } from \"../../App\";\nimport jwt_decode from \"jwt-decode\";\n\n//Creating a custom hook for form validation\n\nconst useFormSignUp = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    name: \"\",\n    lastname: \"\",\n    birthdate: \"\",\n    username: \"\",\n    password: \"\",\n    passwordConfirm: \"\"\n  });\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    setErrors(validateForm(values));\n    setIsSubmitting(true);\n\n    console.log(values);\n\n    fetch(`${urlApi}/register`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormSignUp;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/useFormAddDino.js",["189","190"],"import { useState, useEffect } from \"react\";\nimport {urlApi} from \"../../App\";\nimport jwt_decode from \"jwt-decode\";\n\n\n//Creating a custom hook for form validation\n\nconst useFormAddDino = (callback, validateFormAddDino) => {\n  const [values, setValues] = useState({\n    name: \"\",\n    lastname: \"\",\n    birthdate: \"\",\n    username: \"\",\n    password: \"\",\n    passwordConfirm: \"\"\n  });\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    setErrors(validateFormAddDino(values));\n    setIsSubmitting(true);\n\n    const formData = new FormData();\n    formData.append(\"name\", values.name);\n    formData.append(\"lastname\", values.lastname);\n    formData.append(\"birthdate\", values.birthdate);\n    formData.append(\"username\", values.username);\n    formData.append(\"password\", values.password);\n\n    console.log(formData);\n    console.log(values);\n\n    fetch(`${urlApi}/user/register`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      body:formData,\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormAddDino;\n","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponen/validateFormAddDino.js",[],{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":64,"column":16,"nodeType":"197","messageId":"198","endLine":64,"endColumn":23},{"ruleId":"195","severity":1,"message":"199","line":2,"column":10,"nodeType":"197","messageId":"198","endLine":2,"endColumn":20},{"ruleId":"195","severity":1,"message":"200","line":3,"column":10,"nodeType":"197","messageId":"198","endLine":3,"endColumn":21},{"ruleId":"195","severity":1,"message":"201","line":8,"column":16,"nodeType":"197","messageId":"198","endLine":8,"endColumn":22},{"ruleId":"202","severity":1,"message":"203","line":21,"column":6,"nodeType":"204","endLine":21,"endColumn":8,"suggestions":"205"},{"ruleId":"195","severity":1,"message":"201","line":10,"column":16,"nodeType":"197","messageId":"198","endLine":10,"endColumn":22},{"ruleId":"195","severity":1,"message":"206","line":4,"column":8,"nodeType":"197","messageId":"198","endLine":4,"endColumn":24},{"ruleId":"195","severity":1,"message":"207","line":4,"column":8,"nodeType":"197","messageId":"198","endLine":4,"endColumn":18},{"ruleId":"195","severity":1,"message":"201","line":18,"column":16,"nodeType":"197","messageId":"198","endLine":18,"endColumn":22},{"ruleId":"195","severity":1,"message":"208","line":2,"column":10,"nodeType":"197","messageId":"198","endLine":2,"endColumn":16},{"ruleId":"195","severity":1,"message":"209","line":10,"column":11,"nodeType":"197","messageId":"198","endLine":10,"endColumn":23},{"ruleId":"195","severity":1,"message":"210","line":10,"column":25,"nodeType":"197","messageId":"198","endLine":10,"endColumn":31},{"ruleId":"195","severity":1,"message":"211","line":10,"column":47,"nodeType":"197","messageId":"198","endLine":10,"endColumn":53},{"ruleId":"195","severity":1,"message":"207","line":2,"column":8,"nodeType":"197","messageId":"198","endLine":2,"endColumn":18},{"ruleId":"195","severity":1,"message":"212","line":15,"column":11,"nodeType":"197","messageId":"198","endLine":15,"endColumn":14},{"ruleId":"202","severity":1,"message":"213","line":70,"column":6,"nodeType":"204","endLine":70,"endColumn":14,"suggestions":"214"},{"ruleId":"195","severity":1,"message":"207","line":3,"column":8,"nodeType":"197","messageId":"198","endLine":3,"endColumn":18},{"ruleId":"202","severity":1,"message":"213","line":63,"column":6,"nodeType":"204","endLine":63,"endColumn":14,"suggestions":"215"},{"ruleId":"195","severity":1,"message":"207","line":3,"column":8,"nodeType":"197","messageId":"198","endLine":3,"endColumn":18},{"ruleId":"202","severity":1,"message":"213","line":69,"column":6,"nodeType":"204","endLine":69,"endColumn":14,"suggestions":"216"},"no-native-reassign",["217"],"no-negated-in-lhs",["218"],"no-unused-vars","'setData' is assigned a value but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'DinoContext' is defined but never used.","'setJwt' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'jwt'. Either include it or remove the dependency array.","ArrayExpression",["219"],"'FormSuccessLogIn' is defined but never used.","'jwt_decode' is defined but never used.","'urlApi' is defined but never used.","'handleChange' is assigned a value but never used.","'values' is assigned a value but never used.","'errors' is assigned a value but never used.","'jwt' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'callback' and 'isSubmitting'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["220"],["221"],["222"],"no-global-assign","no-unsafe-negation",{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"225","fix":"227"},{"desc":"225","fix":"228"},"Update the dependencies array to be: [jwt]",{"range":"229","text":"230"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"231","text":"232"},{"range":"233","text":"232"},{"range":"234","text":"232"},[618,620],"[jwt]",[1752,1760],"[callback, errors, isSubmitting]",[1437,1445],[1682,1690]]