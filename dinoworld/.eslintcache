[{"/home/roman/Documentos/Repo/dinoworld/src/index.js":"1","/home/roman/Documentos/Repo/dinoworld/src/App.js":"2","/home/roman/Documentos/Repo/dinoworld/src/layout/Navbar.js":"3","/home/roman/Documentos/Repo/dinoworld/src/layout/Footer.js":"4","/home/roman/Documentos/Repo/dinoworld/src/pages/Home.js":"5","/home/roman/Documentos/Repo/dinoworld/src/pages/TopDinos.js":"6","/home/roman/Documentos/Repo/dinoworld/src/pages/Dino.js":"7","/home/roman/Documentos/Repo/dinoworld/src/pages/Table.js":"8","/home/roman/Documentos/Repo/dinoworld/src/pages/CardGame.js":"9","/home/roman/Documentos/Repo/dinoworld/src/pages/Favourite.js":"10","/home/roman/Documentos/Repo/dinoworld/src/pages/FormLogIn.js":"11","/home/roman/Documentos/Repo/dinoworld/src/pages/FormSignUp.js":"12","/home/roman/Documentos/Repo/dinoworld/src/pages/EditDino.js":"13","/home/roman/Documentos/Repo/dinoworld/src/components/TopDinosComponent/TopDinosComponent.js":"14","/home/roman/Documentos/Repo/dinoworld/src/components/DinoComponent/DinoComponent.js":"15","/home/roman/Documentos/Repo/dinoworld/src/components/TableComponent/TableComponent.js":"16","/home/roman/Documentos/Repo/dinoworld/src/components/FavouriteComponent/FavouriteComponent.js":"17","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogInComponent.js":"18","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUpComponent.js":"19","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/HomeComponent.js":"20","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogIn.js":"21","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccessLogIn.js":"22","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUp.js":"23","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccess.js":"24","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/PaginationComponent.js":"25","/home/roman/Documentos/Repo/dinoworld/src/components/DinoCardComponent/DinoCardComponent.js":"26","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormLogIn.js":"27","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormLogIn.js":"28","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormSignUp.js":"29","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormSignUp.js":"30","/home/roman/Documentos/Repo/dinoworld/src/pages/AddDino.js":"31","/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponents/CardGameComponent.js":"32","/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponents/DinoCardGameComponent.js":"33","/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/AddDinoComponent.js":"34","/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/AddDinoForm.js":"35","/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/FormSuccessAddDino.js":"36","/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/useFormAddDino.js":"37","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/validateForm.js":"38","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/EditDinoComponent.js":"39","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/EditDinoForm.js":"40","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/FormSuccessEditDino.js":"41","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/useFormEditDino.js":"42"},{"size":244,"mtime":1610638756874,"results":"43","hashOfConfig":"44"},{"size":2051,"mtime":1617554652287,"results":"45","hashOfConfig":"44"},{"size":3578,"mtime":1617556597916,"results":"46","hashOfConfig":"44"},{"size":566,"mtime":1617548421957,"results":"47","hashOfConfig":"44"},{"size":1192,"mtime":1617550729920,"results":"48","hashOfConfig":"44"},{"size":497,"mtime":1617366136655,"results":"49","hashOfConfig":"44"},{"size":168,"mtime":1617548133638,"results":"50","hashOfConfig":"44"},{"size":1201,"mtime":1617226010143,"results":"51","hashOfConfig":"44"},{"size":3246,"mtime":1617547564832,"results":"52","hashOfConfig":"44"},{"size":734,"mtime":1617553777083,"results":"53","hashOfConfig":"44"},{"size":189,"mtime":1617554561845,"results":"54","hashOfConfig":"44"},{"size":193,"mtime":1617554572063,"results":"55","hashOfConfig":"44"},{"size":203,"mtime":1617548213078,"results":"56","hashOfConfig":"44"},{"size":402,"mtime":1617546544671,"results":"57","hashOfConfig":"44"},{"size":4019,"mtime":1617551845855,"results":"58","hashOfConfig":"44"},{"size":5174,"mtime":1617224778408,"results":"59","hashOfConfig":"44"},{"size":337,"mtime":1617550252349,"results":"60","hashOfConfig":"44"},{"size":469,"mtime":1617552643983,"results":"61","hashOfConfig":"44"},{"size":423,"mtime":1616325902323,"results":"62","hashOfConfig":"44"},{"size":799,"mtime":1617550676100,"results":"63","hashOfConfig":"44"},{"size":1668,"mtime":1617552544479,"results":"64","hashOfConfig":"44"},{"size":183,"mtime":1617556645795,"results":"65","hashOfConfig":"44"},{"size":3603,"mtime":1617552641479,"results":"66","hashOfConfig":"44"},{"size":242,"mtime":1617556896493,"results":"67","hashOfConfig":"44"},{"size":815,"mtime":1617391457832,"results":"68","hashOfConfig":"44"},{"size":2182,"mtime":1617550972323,"results":"69","hashOfConfig":"44"},{"size":2220,"mtime":1617556633029,"results":"70","hashOfConfig":"44"},{"size":673,"mtime":1617553641859,"results":"71","hashOfConfig":"44"},{"size":1661,"mtime":1617553956911,"results":"72","hashOfConfig":"44"},{"size":900,"mtime":1616694125688,"results":"73","hashOfConfig":"44"},{"size":197,"mtime":1617548228714,"results":"74","hashOfConfig":"44"},{"size":2048,"mtime":1617549458355,"results":"75","hashOfConfig":"44"},{"size":352,"mtime":1617378879072,"results":"76","hashOfConfig":"44"},{"size":442,"mtime":1617547750839,"results":"77","hashOfConfig":"44"},{"size":6206,"mtime":1617548729469,"results":"78","hashOfConfig":"44"},{"size":206,"mtime":1617547751245,"results":"79","hashOfConfig":"44"},{"size":2587,"mtime":1617549399740,"results":"80","hashOfConfig":"44"},{"size":1092,"mtime":1617390690344,"results":"81","hashOfConfig":"44"},{"size":485,"mtime":1617378929640,"results":"82","hashOfConfig":"44"},{"size":6290,"mtime":1617552321359,"results":"83","hashOfConfig":"44"},{"size":210,"mtime":1617390307640,"results":"84","hashOfConfig":"44"},{"size":2931,"mtime":1617552388643,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"11cf2xb",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"88"},"/home/roman/Documentos/Repo/dinoworld/src/index.js",[],["178","179"],"/home/roman/Documentos/Repo/dinoworld/src/App.js",[],"/home/roman/Documentos/Repo/dinoworld/src/layout/Navbar.js",[],"/home/roman/Documentos/Repo/dinoworld/src/layout/Footer.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Home.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/TopDinos.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Dino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Table.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/CardGame.js",["180"],"import CardGameComponent from \"../components/CardGameComponents/CardGameComponent\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { urlApi, DinoContext } from \"../App\";\n\nexport default function CardGame() {\n  const { jwt } = useContext(DinoContext);\n\n  const [newGame, setNewGame] = useState(false);\n  const [dinos, setDinos] = useState([]);\n  const [visibleDinos, setVisibleDinos] = useState([]);\n  const [finishedDinos, setFinishedDinos] = useState([]);\n  const [winner, setWinner] = useState(false);\n\n  //Check clicked dinos for match\n  const checkForMatch = (firstIndex, secondIndex) => {\n    //IF indexes doesn't match and dinos name are equal set finished dinos with that indexes\n    if (\n      firstIndex !== secondIndex &&\n      dinos[firstIndex].name === dinos[secondIndex].name\n    ) {\n      setFinishedDinos([...finishedDinos, firstIndex, secondIndex]);\n    } else {\n      //if name doesn't match with interval we set visible dinos to an empty array\n      setTimeout(() => {\n        setVisibleDinos([]);\n      }, 1000);\n    }\n  };\n\n  //With fetch we get only favourite dinos of user that is logged\n  useEffect(() => {\n    fetch(`${urlApi}/favorite/`, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      }\n    })\n      .then(response => response.json())\n      .then(dinos => {\n        const newList = dinos.map(dino => {\n          return {\n            id: dino.ID,\n            name: dino.name,\n            img: dino.img\n          };\n        });\n        setDinos(\n          newList\n            .concat(\n              // Using concat method on a new list of dinos we dublicate every dino in the array\n              newList.map(dino => {\n                // console.log(newList);\n\n                return {\n                  ...dino,\n                  id: dino.id + \"1\" //change id property by adding a \"1\" for dublicated dinos\n                };\n              })\n            )\n            .sort(() => {\n              //With sort method we make a random list of dinos every time we begin a new game\n              return 0.5 - Math.random();\n            })\n        );\n      })\n      .catch(err => console.log(err));\n  }, [jwt, newGame]);\n\n  //With useEffect ckeck if all dinos have been finished(opened) and finish the game by setting winner to true\n  useEffect(() => {\n    if (finishedDinos.length > 0 && finishedDinos.length === dinos.length) {\n      setWinner(true);\n    }\n  }, [finishedDinos]);\n\n  return (\n    <div>\n      <div className=\"text-center p-4 d-flex flex-column\">\n        <button\n          onClick={() => {\n            setNewGame(!newGame);\n            setVisibleDinos([]);\n            setFinishedDinos([]);\n            setWinner(false);\n          }}\n          className=\"btn btn-warning mb-4\"\n        >\n          New Game\n        </button>\n        <div>\n          <CardGameComponent\n            dinos={dinos}\n            visibleDinos={visibleDinos}\n            setVisibleDinos={setVisibleDinos}\n            finishedDinos={finishedDinos}\n            checkForMatch={checkForMatch}\n          />\n          {/* If winner is true return a div with congratulation */}\n          {winner && <h1>You Win!</h1>}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/roman/Documentos/Repo/dinoworld/src/pages/Favourite.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/FormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/FormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/EditDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/TopDinosComponent/TopDinosComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/DinoComponent/DinoComponent.js",["181"],"import { Link, useParams } from \"react-router-dom\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport * as IconName from \"react-icons/md\";\nimport \"./DinoComponent.css\";\nimport { urlApi, DinoContext } from \"../../App\";\nimport jwt_decode from \"jwt-decode\";\nimport Swal from \"sweetalert2\";\n\nfunction DinoComponent() {\n  const { ID } = useParams();\n\n  const { jwt, userRoles } = useContext(DinoContext);\n\n  const [dino, setDino] = useState([]);\n\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    fetch(`${urlApi}/dinosaur/${ID}`)\n      .then(resp => resp.json())\n      .then(resp => {\n        setDino(resp);\n        setIsLoaded(true);\n      })\n      .catch(err => console.log(err));\n  }, [ID]);\n\n  function toggleDinosaur() {\n    if (dino.users.length !== 0) {\n      fetch(`${urlApi}/favorite/remove/${ID}`, {\n        method: \"DELETE\",\n        mode: \"cors\",\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      })\n        .then(response => response.json())\n\n        .catch(error => console.log(error));\n\n      Swal.fire(`You have removed ${dino.name} from your favorite dinos`);\n      // alert(`You have removed ${name} from your favorite dinos`);\n    } else {\n      fetch(`${urlApi}/favorite/add/${ID}`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      })\n        .then(response => response.json())\n\n        .catch(error => console.log(error));\n      Swal.fire(`You have added ${dino.name} to your favorite dinos`);\n\n      // alert(`You have added ${name} to your favorite dinos`);\n    }\n  }\n\n  function deleteDinosaur() {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You won't be able to revert this!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      background: \"rgba(189,122,34,0.9)\",\n      confirmButtonColor: \"#d33\",\n      cancelButtonColor: \"rgb(21, 126, 21)\",\n      confirmButtonText: \"Yes, delete it!\"\n    }).then(result => {\n      if (result.isConfirmed) {\n        fetch(`${urlApi}/dinosaur/delete/${ID}`, {\n          method: \"DELETE\",\n          mode: \"cors\",\n          headers: {\n            Authorization: \"Bearer \" + jwt\n          }\n        })\n          .then(response => response.json())\n\n          .catch(error => console.log(error));\n        Swal.fire(\"Deleted!\", \"Your file has been deleted.\", \"success\");\n      }\n    });\n  }\n\n  return (\n    <div className=\"dinoAbout\">\n      {/* Get image of dino from a folder using property \"img\" where is saved name of file with that exact dino */}\n      <img src={isLoaded ? `${urlApi}/images/${dino.img}` : null} alt=\"\" />\n      <div className=\"dino-char text-center mt-2\">\n        <h3>{dino.name}</h3>\n        <h6>Weight: {dino.weight} kilograms</h6>\n        <h6>Height: {dino.height} meters</h6>\n        <h6>Length: {dino.lenght} meters</h6>\n        <h6>Diet: {isLoaded && dino.diet.name}</h6>\n        <h6>Top Speed: {dino.top_speed} km/h</h6>\n        <h6>Period: {isLoaded && dino.period.name}</h6>\n        <h6>Continent: {isLoaded && dino.continent.name}</h6>\n        <div className=\"container text-center\">\n          {jwt && (\n            <div style={{ textAlign: \"center\", color: \"#ff6347\" }}>\n              <button\n                className=\"buttonFovorite\"\n                onClick={() => toggleDinosaur()}\n              >\n                <IconName.MdFavorite size={35} />\n              </button>\n            </div>\n          )}\n          {userRoles.includes(\"ROLE_ADMIN\") && (\n            <div className=\"m-2\">\n              <Link to={`/EditDino/${ID}`}>\n                <button className=\"btn btn-warning ml-3\"> EDIT</button>\n              </Link>\n              <button\n                className=\"btn btn-danger ml-3\"\n                onClick={() => deleteDinosaur()}\n              >\n                DELETE\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n      <p className=\"text-center\">{dino.info}</p>\n    </div>\n  );\n}\n\nexport default DinoComponent;\n","/home/roman/Documentos/Repo/dinoworld/src/components/TableComponent/TableComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FavouriteComponent/FavouriteComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogInComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUpComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/HomeComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccessLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccess.js",["182"],"/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/PaginationComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/DinoCardComponent/DinoCardComponent.js",["183","184","185"],"import { useContext, useState } from \"react\";\nimport * as IconName from \"react-icons/md\";\nimport { Link } from \"react-router-dom\";\nimport { urlApi, DinoContext } from \"../../App\";\nimport jwt_decode from \"jwt-decode\";\nimport Swal from \"sweetalert2\";\nimport { DinoHomeContext } from \"../../pages/Home\";\n\nexport default function DinoCardComponent({\n  ID,\n  name,\n  weight,\n  diet,\n  period,\n  img,\n  users\n}) {\n  const { jwt, userEmail } = useContext(DinoContext);\n\n  function toggleDinosaur() {\n    console.log(\"im clicked\");\n\n    if (users.length !== 0) {\n      fetch(`${urlApi}/favorite/remove/${ID}`, {\n        method: \"DELETE\",\n        mode: \"cors\",\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      })\n        .then(response => response.json())\n\n        .catch(error => console.log(error));\n\n      Swal.fire(`You have removed ${name} from your favorite dinos`);\n    } else {\n      fetch(`${urlApi}/favorite/add/${ID}`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      })\n        .then(response => response.json())\n\n        .catch(error => console.log(error));\n      Swal.fire(`You have added ${name} to your favorite dinos`);\n    }\n  }\n\n  let actionButton = \"buttonFovorite\";\n\n  if (jwt) {\n    users.forEach(element => {\n      if (element.email === userEmail) {\n        actionButton = \"buttonFovoriteActive\";\n      }\n    });\n  }\n\n  return (\n    <div className=\"grid-card\">\n      {/* Using Link with path indicated in route in App.js we open the Dino.js with selected dino ID in URL*/}\n\n      <Link\n        to={`/Dino/${ID}`}\n        style={{ textDecoration: \"none\", color: \"rgb(53, 53, 53)\" }}\n      >\n        <img src={`${urlApi}/images/${img}`} alt=\"\" />\n        <h3>{name}</h3>\n        <h6>Weight: {weight} kilograms</h6>\n        <h6>Diet: {diet.name}</h6>\n        <h6>Period: {period.name}</h6>\n      </Link>\n      <div style={{ textAlign: \"center\", color: \"#ff6347\" }}>\n        {jwt && (\n          <button className={actionButton} onClick={() => toggleDinosaur()}>\n            <IconName.MdFavorite size={25} />\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormLogIn.js",["186"],"import { useState, useEffect } from \"react\";\n// import jwt_decode from \"jwt-decode\";\nimport { urlApi } from \"../../App\";\nimport { DinoContext } from \"../../App\";\nimport { useContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\nimport Swal from \"sweetalert2\";\n\n//Creating a custom hook for form validation\n\nconst useForm = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    username: \"\",\n    password: \"\"\n  });\n\n  const { setJwt, setUserEmail, setUserRoles } = useContext(DinoContext);\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n    const currentErrors = validateForm(values);\n    setErrors(currentErrors);\n\n    if (currentErrors.password || currentErrors.username) {\n      return;\n    }\n    setIsSubmitting(true);\n\n    fetch(`${urlApi}/login`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(\"Respuesta: \", response);\n          if (response.code === 401) {\n            Swal.fire(`Invalid email or password`);\n            return;\n          } else {\n            localStorage.setItem(\"mitoken\", response.token);\n\n            const decoded = jwtDecode(response.token);\n            localStorage.setItem(\"userEmail\", decoded.username);\n            localStorage.setItem(\"userRoles\", decoded.roles);\n\n            setJwt(response.token);\n            setUserRoles(decoded.roles);\n            setUserEmail(decoded.username);\n          }\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useForm;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormSignUp.js",["187"],"import { useState, useEffect } from \"react\";\nimport { urlApi } from \"../../App\";\n\n//Creating a custom hook for form validation\n\nconst useFormSignUp = (callback, validateFormSignUp) => {\n  const [values, setValues] = useState({\n    name: \"\",\n    lastname: \"\",\n    birthdate: \"\",\n    username: \"\",\n    password: \"\",\n    passwordConfirm: \"\"\n  });\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    const currentErrors = validateFormSignUp(values);\n    setErrors(currentErrors);\n\n    if (Object.values(currentErrors).some(error => error)) {\n      return;\n    }\n\n    setErrors(validateFormSignUp(values));\n    setIsSubmitting(true);\n\n    fetch(`${urlApi}/register/user`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormSignUp;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/AddDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponents/CardGameComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponents/DinoCardGameComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/AddDinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/AddDinoForm.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/FormSuccessAddDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/useFormAddDino.js",["188"],"import { useState, useEffect, useContext } from \"react\";\n\nimport { urlApi, DinoContext } from \"../../App\";\n\n//Creating a custom hook for form validation\n\nconst useFormAddDino = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    name: \"\",\n    weight: \"\",\n    height: \"\",\n    lenght: \"\",\n    top_speed: \"\",\n    period: \"1\",\n    diet: \"1\",\n    continent: \"1\",\n    top: \"0\",\n    info: \"\",\n    img: []\n  });\n\n  const { jwt } = useContext(DinoContext);\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  //Handlind form inserts and set them to the values\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  //Handling inserted file (img)\n\n  const handleFile = e => {\n    const { name, files } = e.target;\n\n    setValues({\n      ...values,\n      [name]: files[0]\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    const currentErrors = validateForm(values);\n    setErrors(currentErrors);\n\n    //Check if object of values have some errors, is so we  executing handle submit function\n    if (Object.values(currentErrors).some(error => error)) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    const formData = new FormData();\n    formData.append(\"name\", values.name);\n    formData.append(\"weight\", values.weight);\n    formData.append(\"height\", values.height);\n    formData.append(\"lenght\", values.lenght);\n    formData.append(\"top_speed\", values.top_speed);\n    formData.append(\"period\", values.period);\n    formData.append(\"diet\", values.diet);\n    formData.append(\"continent\", values.continent);\n    formData.append(\"top\", values.top);\n    formData.append(\"info\", values.info);\n    formData.append(\"img\", values.img);\n\n    fetch(`${urlApi}/register/dinosaur`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      },\n      body: formData\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleFile, handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormAddDino;\n","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/validateForm.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/EditDinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/EditDinoForm.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/FormSuccessEditDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/useFormEditDino.js",["189"],"import { useState, useEffect, useContext } from \"react\";\nimport { urlApi, DinoContext } from \"../../App\";\nimport { useParams } from \"react-router-dom\";\n\n//Creating a custom hook for form validation\n\nconst useFormEditDino = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    name: \"\",\n    weight: \"\",\n    height: \"\",\n    lenght: \"\",\n    top_speed: \"\",\n    period: \"\",\n    diet: \"\",\n    continent: \"\",\n    top: \"\",\n    info: \"\",\n    img: []\n  });\n\n  const { ID } = useParams();\n\n  useEffect(() => {\n    fetch(`${urlApi}/dinosaur/${ID}`)\n      .then(resp => resp.json())\n      .then(resp => {\n        setValues(resp);\n      })\n      .catch(err => console.log(err));\n  }, [ID]);\n\n  const { jwt } = useContext(DinoContext);\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  //Handlind form inserts and set them to the values\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  //Handling inserted file (img)\n\n  const handleFile = e => {\n    const { name, files } = e.target;\n\n    setValues({\n      ...values,\n      [name]: files[0]\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    const currentErrors = validateForm(values);\n    setErrors(currentErrors);\n\n    //Check if object of values have some errors, is so we stop executing handle submit function\n    if (Object.values(currentErrors).some(error => error)) {\n      return;\n    }\n\n    setErrors(validateForm(values));\n    setIsSubmitting(true);\n\n    const formData = new FormData();\n    formData.append(\"name\", values.name);\n    formData.append(\"weight\", values.weight);\n    formData.append(\"height\", values.height);\n    formData.append(\"lenght\", values.lenght);\n    formData.append(\"top_speed\", values.top_speed);\n    formData.append(\"period\", values.period);\n    formData.append(\"diet\", values.diet);\n    formData.append(\"continent\", values.continent);\n    formData.append(\"top\", values.top);\n    formData.append(\"info\", values.info);\n    formData.append(\"img\", values.img);\n\n    console.log(formData);\n\n    fetch(`${urlApi}/dinosaur/edit/${ID}`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      },\n      body: formData\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleFile, handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormEditDino;\n",{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","severity":1,"message":"195","line":75,"column":6,"nodeType":"196","endLine":75,"endColumn":21,"suggestions":"197"},{"ruleId":"198","severity":1,"message":"199","line":6,"column":8,"nodeType":"200","messageId":"201","endLine":6,"endColumn":18},{"ruleId":"198","severity":1,"message":"202","line":2,"column":8,"nodeType":"200","messageId":"201","endLine":2,"endColumn":17},{"ruleId":"198","severity":1,"message":"203","line":1,"column":22,"nodeType":"200","messageId":"201","endLine":1,"endColumn":30},{"ruleId":"198","severity":1,"message":"199","line":5,"column":8,"nodeType":"200","messageId":"201","endLine":5,"endColumn":18},{"ruleId":"198","severity":1,"message":"204","line":7,"column":10,"nodeType":"200","messageId":"201","endLine":7,"endColumn":25},{"ruleId":"194","severity":1,"message":"205","line":80,"column":6,"nodeType":"196","endLine":80,"endColumn":14,"suggestions":"206"},{"ruleId":"194","severity":1,"message":"205","line":67,"column":6,"nodeType":"196","endLine":67,"endColumn":14,"suggestions":"207"},{"ruleId":"194","severity":1,"message":"205","line":100,"column":6,"nodeType":"196","endLine":100,"endColumn":14,"suggestions":"208"},{"ruleId":"194","severity":1,"message":"205","line":114,"column":6,"nodeType":"196","endLine":114,"endColumn":14,"suggestions":"209"},"no-native-reassign",["210"],"no-negated-in-lhs",["211"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dinos.length'. Either include it or remove the dependency array.","ArrayExpression",["212"],"no-unused-vars","'jwt_decode' is defined but never used.","Identifier","unusedVar","'FormLogIn' is defined but never used.","'useState' is defined but never used.","'DinoHomeContext' is defined but never used.","React Hook useEffect has missing dependencies: 'callback' and 'isSubmitting'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["213"],["214"],["215"],["216"],"no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"219","fix":"221"},{"desc":"219","fix":"222"},{"desc":"219","fix":"223"},"Update the dependencies array to be: [dinos.length, finishedDinos]",{"range":"224","text":"225"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"226","text":"227"},{"range":"228","text":"227"},{"range":"229","text":"227"},{"range":"230","text":"227"},[2463,2478],"[dinos.length, finishedDinos]",[2123,2131],"[callback, errors, isSubmitting]",[1558,1566],[2471,2479],[2814,2822]]