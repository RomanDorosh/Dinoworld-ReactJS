[{"/home/roman/Documentos/Repo/dinoworld/src/index.js":"1","/home/roman/Documentos/Repo/dinoworld/src/App.js":"2","/home/roman/Documentos/Repo/dinoworld/src/layout/Navbar.js":"3","/home/roman/Documentos/Repo/dinoworld/src/layout/Footer.js":"4","/home/roman/Documentos/Repo/dinoworld/src/pages/Home.js":"5","/home/roman/Documentos/Repo/dinoworld/src/pages/TopDinos.js":"6","/home/roman/Documentos/Repo/dinoworld/src/pages/Dino.js":"7","/home/roman/Documentos/Repo/dinoworld/src/pages/Table.js":"8","/home/roman/Documentos/Repo/dinoworld/src/pages/CardGame.js":"9","/home/roman/Documentos/Repo/dinoworld/src/pages/Favourite.js":"10","/home/roman/Documentos/Repo/dinoworld/src/pages/FormLogIn.js":"11","/home/roman/Documentos/Repo/dinoworld/src/pages/FormSignUp.js":"12","/home/roman/Documentos/Repo/dinoworld/src/pages/EditDino.js":"13","/home/roman/Documentos/Repo/dinoworld/src/components/TopDinosComponent/TopDinosComponent.js":"14","/home/roman/Documentos/Repo/dinoworld/src/components/DinoComponent/DinoComponent.js":"15","/home/roman/Documentos/Repo/dinoworld/src/components/TableComponent/TableComponent.js":"16","/home/roman/Documentos/Repo/dinoworld/src/components/FavouriteComponent/FavouriteComponent.js":"17","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogInComponent.js":"18","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUpComponent.js":"19","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/HomeComponent.js":"20","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogIn.js":"21","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccessLogIn.js":"22","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUp.js":"23","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccess.js":"24","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/PaginationComponent.js":"25","/home/roman/Documentos/Repo/dinoworld/src/components/DinoCardComponent/DinoCardComponent.js":"26","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormLogIn.js":"27","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormLogIn.js":"28","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormSignUp.js":"29","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormSignUp.js":"30","/home/roman/Documentos/Repo/dinoworld/src/pages/AddDino.js":"31","/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponents/CardGameComponent.js":"32","/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponents/DinoCardGameComponent.js":"33","/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/AddDinoComponent.js":"34","/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/AddDinoForm.js":"35","/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/FormSuccessAddDino.js":"36","/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/useFormAddDino.js":"37","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/validateForm.js":"38","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/EditDinoComponent.js":"39","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/EditDinoForm.js":"40","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/FormSuccessEditDino.js":"41","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/useFormEditDino.js":"42"},{"size":244,"mtime":1610638756874,"results":"43","hashOfConfig":"44"},{"size":2206,"mtime":1617648281230,"results":"45","hashOfConfig":"44"},{"size":3619,"mtime":1617645794659,"results":"46","hashOfConfig":"44"},{"size":610,"mtime":1617645611335,"results":"47","hashOfConfig":"44"},{"size":1192,"mtime":1617550729920,"results":"48","hashOfConfig":"44"},{"size":571,"mtime":1617648036204,"results":"49","hashOfConfig":"44"},{"size":168,"mtime":1617548133638,"results":"50","hashOfConfig":"44"},{"size":1284,"mtime":1617647981569,"results":"51","hashOfConfig":"44"},{"size":3561,"mtime":1617647359681,"results":"52","hashOfConfig":"44"},{"size":815,"mtime":1617647525597,"results":"53","hashOfConfig":"44"},{"size":189,"mtime":1617554561845,"results":"54","hashOfConfig":"44"},{"size":193,"mtime":1617554572063,"results":"55","hashOfConfig":"44"},{"size":203,"mtime":1617548213078,"results":"56","hashOfConfig":"44"},{"size":407,"mtime":1617637465283,"results":"57","hashOfConfig":"44"},{"size":4514,"mtime":1617644228876,"results":"58","hashOfConfig":"44"},{"size":5174,"mtime":1617224778408,"results":"59","hashOfConfig":"44"},{"size":421,"mtime":1617645157588,"results":"60","hashOfConfig":"44"},{"size":683,"mtime":1617639146441,"results":"61","hashOfConfig":"44"},{"size":637,"mtime":1617642194240,"results":"62","hashOfConfig":"44"},{"size":864,"mtime":1617645208872,"results":"63","hashOfConfig":"44"},{"size":1731,"mtime":1617641033159,"results":"64","hashOfConfig":"44"},{"size":249,"mtime":1617642866712,"results":"65","hashOfConfig":"44"},{"size":3666,"mtime":1617642152073,"results":"66","hashOfConfig":"44"},{"size":306,"mtime":1617638493171,"results":"67","hashOfConfig":"44"},{"size":1072,"mtime":1617645507051,"results":"68","hashOfConfig":"44"},{"size":2320,"mtime":1617643687655,"results":"69","hashOfConfig":"44"},{"size":2995,"mtime":1617642734172,"results":"70","hashOfConfig":"44"},{"size":673,"mtime":1617553641859,"results":"71","hashOfConfig":"44"},{"size":2111,"mtime":1617642735376,"results":"72","hashOfConfig":"44"},{"size":900,"mtime":1616694125688,"results":"73","hashOfConfig":"44"},{"size":197,"mtime":1617548228714,"results":"74","hashOfConfig":"44"},{"size":2223,"mtime":1617643351589,"results":"75","hashOfConfig":"44"},{"size":385,"mtime":1617643391149,"results":"76","hashOfConfig":"44"},{"size":691,"mtime":1617639120425,"results":"77","hashOfConfig":"44"},{"size":6305,"mtime":1617644472538,"results":"78","hashOfConfig":"44"},{"size":295,"mtime":1617641072748,"results":"79","hashOfConfig":"44"},{"size":3000,"mtime":1617644587597,"results":"80","hashOfConfig":"44"},{"size":1092,"mtime":1617390690344,"results":"81","hashOfConfig":"44"},{"size":699,"mtime":1617644279864,"results":"82","hashOfConfig":"44"},{"size":6434,"mtime":1617644360343,"results":"83","hashOfConfig":"44"},{"size":299,"mtime":1617644381403,"results":"84","hashOfConfig":"44"},{"size":3542,"mtime":1617645078956,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"11cf2xb",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"88"},"/home/roman/Documentos/Repo/dinoworld/src/index.js",[],["176","177"],"/home/roman/Documentos/Repo/dinoworld/src/App.js",[],"/home/roman/Documentos/Repo/dinoworld/src/layout/Navbar.js",[],"/home/roman/Documentos/Repo/dinoworld/src/layout/Footer.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Home.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/TopDinos.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Dino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Table.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/CardGame.js",["178"],"import CardGameComponent from \"../components/CardGameComponents/CardGameComponent\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { urlApi, DinoContext } from \"../App\";\n\nexport default function CardGame() {\n  //Get token from Dinocontext\n  const { jwt } = useContext(DinoContext);\n\n  //Set default values\n  const [newGame, setNewGame] = useState(false);\n  const [dinos, setDinos] = useState([]);\n  const [visibleDinos, setVisibleDinos] = useState([]);\n  const [finishedDinos, setFinishedDinos] = useState([]);\n  const [winner, setWinner] = useState(false);\n\n  //Check clicked dinos for match\n  const checkForMatch = (firstIndex, secondIndex) => {\n    //IF indexes doesn't match and dinos name are equal set them to finished dinos with that indexes\n    if (\n      firstIndex !== secondIndex &&\n      dinos[firstIndex].name === dinos[secondIndex].name\n    ) {\n      setFinishedDinos([...finishedDinos, firstIndex, secondIndex]);\n    } else {\n      //if name doesn't match with interval we set visible dinos to an empty array\n      setTimeout(() => {\n        setVisibleDinos([]);\n      }, 1000);\n    }\n  };\n\n  //With fetch we get only favourite dinos of user that is logged\n  useEffect(() => {\n    fetch(`${urlApi}/favorite/`, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      }\n    })\n      .then(response => response.json())\n      .then(dinos => {\n        //Create an array of response data using map method\n        const newList = dinos.map(dino => {\n          //return only property needed for a game\n          return {\n            id: dino.ID,\n            name: dino.name,\n            img: dino.img\n          };\n        });\n        //Set to dinos an array concatenated with another array which is created using map with changing ID property\n        setDinos(\n          newList\n            .concat(\n              // Using concat method on a new list of dinos we dublicate every dino in the array\n              newList.map(dino => {\n                return {\n                  ...dino,\n                  id: dino.id + \"1\" //change id property by adding a \"1\" for dublicated dinos\n                };\n              })\n            )\n            .sort(() => {\n              //With sort method we make a random list of dinos every time we begin a new game\n              return 0.5 - Math.random();\n            })\n        );\n      })\n      .catch(err => console.log(err));\n  }, [jwt, newGame]);\n\n  //With useEffect ckeck if all dinos have been finished(opened) and finish the game by setting winner to true\n  useEffect(() => {\n    if (finishedDinos.length > 0 && finishedDinos.length === dinos.length) {\n      setWinner(true);\n    }\n  }, [finishedDinos]);\n\n  return (\n    <div>\n      <div className=\"text-center p-4 d-flex flex-column\">\n        <button\n          // when button is clicked we set all to a default values\n          onClick={() => {\n            setNewGame(!newGame);\n            setVisibleDinos([]);\n            setFinishedDinos([]);\n            setWinner(false);\n          }}\n          className=\"btn btn-warning mb-4\"\n        >\n          New Game\n        </button>\n        <div>\n          <CardGameComponent\n            dinos={dinos}\n            visibleDinos={visibleDinos}\n            setVisibleDinos={setVisibleDinos}\n            finishedDinos={finishedDinos}\n            checkForMatch={checkForMatch}\n          />\n          {/* If winner is true return a div with congratulation */}\n          {winner && <h1>You Win!</h1>}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/roman/Documentos/Repo/dinoworld/src/pages/Favourite.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/FormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/FormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/EditDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/TopDinosComponent/TopDinosComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/DinoComponent/DinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/TableComponent/TableComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FavouriteComponent/FavouriteComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogInComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUpComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/HomeComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccessLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccess.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/PaginationComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/DinoCardComponent/DinoCardComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormLogIn.js",["179"],"import { useState, useEffect } from \"react\";\nimport { urlApi } from \"../../App\";\nimport { DinoContext } from \"../../App\";\nimport { useContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\nimport Swal from \"sweetalert2\";\n\n//Creating a custom hook for form validation\n\nconst useForm = (callback, validateForm) => {\n  //Assign default values to every property of values object\n  const [values, setValues] = useState({\n    username: \"\",\n    password: \"\"\n  });\n\n  const { setJwt, setUserEmail, setUserRoles } = useContext(DinoContext);\n\n  //Assign errors to an empty object\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  //Handlind form inserts and set them to the values\n  const handleChange = e => {\n    //With destructuring we assign new values and property to the values object\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  //!!!Handle sumbit is need to be rechecked and improved\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n    e.preventDefault();\n\n    //Check for curent errors befor sending data to the api\n    const currentErrors = validateForm(values);\n    setErrors(currentErrors);\n\n    //Check if object of values have some errors, is so we  executing handle submit function\n    if (currentErrors.password || currentErrors.username) {\n      return;\n    }\n    setIsSubmitting(true);\n\n    //Make post with user data\n    fetch(`${urlApi}/login`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(\"Respuesta: \", response);\n          if (response.code === 401) {\n            Swal.fire(`Invalid email or password`); //If credencial is incorrect break fetch with empty return\n            //!!!Need to be improved restructured and make a redirect\n            return;\n          } else {\n            //Assign token to a variable in local storage, also user's email and roles\n            localStorage.setItem(\"mitoken\", response.token);\n            const decoded = jwtDecode(response.token);\n            localStorage.setItem(\"userEmail\", decoded.username);\n            localStorage.setItem(\"userRoles\", decoded.roles);\n\n            //!!!Need to be revise\n            setJwt(response.token);\n            setUserRoles(decoded.roles);\n            setUserEmail(decoded.username);\n          }\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if isSubmitting is true than invoke function callback\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useForm;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormSignUp.js",["180"],"import { useState, useEffect } from \"react\";\nimport { urlApi } from \"../../App\";\n\n//Creating a custom hook for form validation\n\nconst useFormSignUp = (callback, validateFormSignUp) => {\n  //Assign default values to every property of values object\n  const [values, setValues] = useState({\n    name: \"\",\n    lastname: \"\",\n    birthdate: \"\",\n    username: \"\",\n    password: \"\",\n    passwordConfirm: \"\"\n  });\n\n  //Assign errors to an empty object\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  //Handlind form inserts and set them to the values\n  const handleChange = e => {\n    //With destructuring we assign new values and property to the values object\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  //!!!Handle sumbit is need to be rechecked and improved\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    //Check for curent errors befor sending data to the api\n    const currentErrors = validateFormSignUp(values);\n    setErrors(currentErrors);\n\n    //Check if object of values have some errors, is so we  executing handle submit function\n    if (Object.values(currentErrors).some(error => error)) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    //Make post with inserted data to registr user\n    fetch(`${urlApi}/register/user`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormSignUp;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/AddDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponents/CardGameComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponents/DinoCardGameComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/AddDinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/AddDinoForm.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/FormSuccessAddDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/AddDinoComponents/useFormAddDino.js",["181"],"import { useState, useEffect, useContext } from \"react\";\n\nimport { urlApi, DinoContext } from \"../../App\";\n\n//Creating a custom hook for form validation\n\nconst useFormAddDino = (callback, validateForm) => {\n  //Assign default values to every property of values object\n  const [values, setValues] = useState({\n    name: \"\",\n    weight: \"\",\n    height: \"\",\n    lenght: \"\",\n    top_speed: \"\",\n    period: \"1\",\n    diet: \"1\",\n    continent: \"1\",\n    top: \"0\",\n    info: \"\",\n    img: []\n  });\n\n  const { jwt } = useContext(DinoContext);\n\n  //Assign errors to an empty object\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  //Handlind form inserts and set them to the values\n  const handleChange = e => {\n    //With destructuring we assign new values and property to the values object\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  //Handling inserted file (img)\n  const handleFile = e => {\n    const { name, files } = e.target;\n\n    setValues({\n      ...values,\n      [name]: files[0]\n    });\n  };\n\n  //!!!Handle submit is need to be rechecked and improved\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n    e.preventDefault();\n\n    //Check for curent errors befor sending data to the api\n    const currentErrors = validateForm(values);\n    setErrors(currentErrors);\n\n    //Check if object of values have some errors, is so we  executing handle submit function\n    if (Object.values(currentErrors).some(error => error)) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    //Create FormData to send to the API\n    const formData = new FormData();\n    formData.append(\"name\", values.name);\n    formData.append(\"weight\", values.weight);\n    formData.append(\"height\", values.height);\n    formData.append(\"lenght\", values.lenght);\n    formData.append(\"top_speed\", values.top_speed);\n    formData.append(\"period\", values.period);\n    formData.append(\"diet\", values.diet);\n    formData.append(\"continent\", values.continent);\n    formData.append(\"top\", values.top);\n    formData.append(\"info\", values.info);\n    formData.append(\"img\", values.img);\n\n    //Make POST with users jwt(need to have role ADMIN)\n    fetch(`${urlApi}/register/dinosaur`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      },\n      body: formData\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if isSubmitting is true than invoke function callback\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleFile, handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormAddDino;\n","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/validateForm.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/EditDinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/EditDinoForm.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/FormSuccessEditDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponents/useFormEditDino.js",["182"],"import { useState, useEffect, useContext } from \"react\";\nimport { urlApi, DinoContext } from \"../../App\";\nimport { useParams } from \"react-router-dom\";\n\n//Creating a custom hook for form validation\n\nconst useFormEditDino = (callback, validateForm) => {\n  //Assign default values to every property of values object\n  const [values, setValues] = useState({\n    name: \"\",\n    weight: \"\",\n    height: \"\",\n    lenght: \"\",\n    top_speed: \"\",\n    period: \"\",\n    diet: \"\",\n    continent: \"\",\n    top: \"\",\n    info: \"\",\n    img: []\n  });\n\n  //Using useParams hook get ID of dino that was clicked\n  const { ID } = useParams();\n\n  //Making a fetch  with use effect, with dependencie of ID\n  useEffect(() => {\n    fetch(`${urlApi}/dinosaur/${ID}`)\n      .then(resp => resp.json())\n      .then(resp => {\n        setValues(resp);\n      })\n      .catch(err => console.log(err));\n  }, [ID]);\n\n  const { jwt } = useContext(DinoContext);\n\n  //Assign errors to an empty object\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  //Handlind form inserts and set them to the values\n  const handleChange = e => {\n    //With destructuring we assign new values and property to the values object\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  //Handling inserted file (img)\n\n  const handleFile = e => {\n    const { name, files } = e.target;\n\n    setValues({\n      ...values,\n      [name]: files[0]\n    });\n  };\n\n  //!!!Handle submit is need to be rechecked and improved\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    //Check for curent errors befor sending data to the api\n    const currentErrors = validateForm(values);\n    setErrors(currentErrors);\n\n    //Check if object of values have some errors, is so we stop executing handle submit function\n    if (Object.values(currentErrors).some(error => error)) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    //Create FormData to send to the API\n    const formData = new FormData();\n    formData.append(\"name\", values.name);\n    formData.append(\"weight\", values.weight);\n    formData.append(\"height\", values.height);\n    formData.append(\"lenght\", values.lenght);\n    formData.append(\"top_speed\", values.top_speed);\n    formData.append(\"period\", values.period.ID); //We need to send ID, not name to API\n    formData.append(\"diet\", values.diet.ID); //We need to send ID, not name to API\n    formData.append(\"continent\", values.continent.ID); //We need to send ID, not name to API\n    formData.append(\"top\", values.top * 1); // Convert boolean to a number for API\n    formData.append(\"info\", values.info);\n    formData.append(\"img\", values.img);\n\n    //Make POST with users jwt(need to have role ADMIN)\n    fetch(`${urlApi}/dinosaur/edit/${ID}`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      },\n      body: formData\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleFile, handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormEditDino;\n",{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","severity":1,"message":"188","line":78,"column":6,"nodeType":"189","endLine":78,"endColumn":21,"suggestions":"190"},{"ruleId":"187","severity":1,"message":"191","line":90,"column":6,"nodeType":"189","endLine":90,"endColumn":14,"suggestions":"192"},{"ruleId":"187","severity":1,"message":"191","line":74,"column":6,"nodeType":"189","endLine":74,"endColumn":14,"suggestions":"193"},{"ruleId":"187","severity":1,"message":"191","line":105,"column":6,"nodeType":"189","endLine":105,"endColumn":14,"suggestions":"194"},{"ruleId":"187","severity":1,"message":"191","line":120,"column":6,"nodeType":"189","endLine":120,"endColumn":14,"suggestions":"195"},"no-native-reassign",["196"],"no-negated-in-lhs",["197"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dinos.length'. Either include it or remove the dependency array.","ArrayExpression",["198"],"React Hook useEffect has missing dependencies: 'callback' and 'isSubmitting'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["199"],["200"],["201"],["202"],"no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"205","fix":"207"},{"desc":"205","fix":"208"},{"desc":"205","fix":"209"},"Update the dependencies array to be: [dinos.length, finishedDinos]",{"range":"210","text":"211"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"212","text":"213"},{"range":"214","text":"213"},{"range":"215","text":"213"},{"range":"216","text":"213"},[2711,2726],"[dinos.length, finishedDinos]",[2898,2906],"[callback, errors, isSubmitting]",[2008,2016],[2884,2892],[3425,3433]]