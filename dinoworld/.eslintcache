[{"/home/roman/Documentos/Repo/dinoworld/src/index.js":"1","/home/roman/Documentos/Repo/dinoworld/src/App.js":"2","/home/roman/Documentos/Repo/dinoworld/src/layout/Navbar.js":"3","/home/roman/Documentos/Repo/dinoworld/src/layout/Footer.js":"4","/home/roman/Documentos/Repo/dinoworld/src/pages/Home.js":"5","/home/roman/Documentos/Repo/dinoworld/src/pages/TopDinos.js":"6","/home/roman/Documentos/Repo/dinoworld/src/pages/Dino.js":"7","/home/roman/Documentos/Repo/dinoworld/src/pages/Table.js":"8","/home/roman/Documentos/Repo/dinoworld/src/pages/CardGame.js":"9","/home/roman/Documentos/Repo/dinoworld/src/pages/Favourite.js":"10","/home/roman/Documentos/Repo/dinoworld/src/pages/FormLogIn.js":"11","/home/roman/Documentos/Repo/dinoworld/src/pages/FormSignUp.js":"12","/home/roman/Documentos/Repo/dinoworld/src/pages/EditDino.js":"13","/home/roman/Documentos/Repo/dinoworld/src/components/TopDinosComponent/TopDinosComponent.js":"14","/home/roman/Documentos/Repo/dinoworld/src/components/DinoComponent/DinoComponent.js":"15","/home/roman/Documentos/Repo/dinoworld/src/components/TableComponent/TableComponent.js":"16","/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponent/CardGameComponent.js":"17","/home/roman/Documentos/Repo/dinoworld/src/components/FavouriteComponent/FavouriteComponent.js":"18","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogInComponent.js":"19","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUpComponent.js":"20","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/HomeComponent.js":"21","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogIn.js":"22","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccessLogIn.js":"23","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUp.js":"24","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccess.js":"25","/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/PaginationComponent.js":"26","/home/roman/Documentos/Repo/dinoworld/src/components/DinoCardComponent/DinoCardComponent.js":"27","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormLogIn.js":"28","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormLogIn.js":"29","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormSignUp.js":"30","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormSignUp.js":"31","/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponent/DinoCardGameComponent.js":"32","/home/roman/Documentos/Repo/dinoworld/src/pages/AddDino.js":"33","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/EditDinoComponent.js":"34","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/EditDinoForm.js":"35","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/FormSuccessEditDino.js":"36","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/useFormEditDino.js":"37","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/validateForm.js":"38","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/AddDinoComponent.js":"39","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/AddDinoForm.js":"40","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/FormSuccessAddDino.js":"41","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/useFormAddDino.js":"42"},{"size":244,"mtime":1610638756874,"results":"43","hashOfConfig":"44"},{"size":1614,"mtime":1617391754210,"results":"45","hashOfConfig":"44"},{"size":3475,"mtime":1617391707391,"results":"46","hashOfConfig":"44"},{"size":529,"mtime":1616177336399,"results":"47","hashOfConfig":"44"},{"size":1360,"mtime":1617392540206,"results":"48","hashOfConfig":"44"},{"size":497,"mtime":1617366136655,"results":"49","hashOfConfig":"44"},{"size":168,"mtime":1616177519011,"results":"50","hashOfConfig":"44"},{"size":1201,"mtime":1617226010143,"results":"51","hashOfConfig":"44"},{"size":3245,"mtime":1617379195943,"results":"52","hashOfConfig":"44"},{"size":926,"mtime":1617392440574,"results":"53","hashOfConfig":"44"},{"size":319,"mtime":1616521899767,"results":"54","hashOfConfig":"44"},{"size":187,"mtime":1616177997405,"results":"55","hashOfConfig":"44"},{"size":201,"mtime":1617390976647,"results":"56","hashOfConfig":"44"},{"size":427,"mtime":1616178627837,"results":"57","hashOfConfig":"44"},{"size":4122,"mtime":1617391535524,"results":"58","hashOfConfig":"44"},{"size":5174,"mtime":1617224778408,"results":"59","hashOfConfig":"44"},{"size":2072,"mtime":1617378867068,"results":"60","hashOfConfig":"44"},{"size":363,"mtime":1617392458502,"results":"61","hashOfConfig":"44"},{"size":614,"mtime":1617379052531,"results":"62","hashOfConfig":"44"},{"size":423,"mtime":1616325902323,"results":"63","hashOfConfig":"44"},{"size":1083,"mtime":1617379908482,"results":"64","hashOfConfig":"44"},{"size":1694,"mtime":1617363045407,"results":"65","hashOfConfig":"44"},{"size":284,"mtime":1617381014926,"results":"66","hashOfConfig":"44"},{"size":3643,"mtime":1616693800038,"results":"67","hashOfConfig":"44"},{"size":250,"mtime":1617379070671,"results":"68","hashOfConfig":"44"},{"size":815,"mtime":1617391457832,"results":"69","hashOfConfig":"44"},{"size":2786,"mtime":1617393045049,"results":"70","hashOfConfig":"44"},{"size":1955,"mtime":1617380541818,"results":"71","hashOfConfig":"44"},{"size":494,"mtime":1616329809889,"results":"72","hashOfConfig":"44"},{"size":1548,"mtime":1617100631059,"results":"73","hashOfConfig":"44"},{"size":900,"mtime":1616694125688,"results":"74","hashOfConfig":"44"},{"size":352,"mtime":1617378879072,"results":"75","hashOfConfig":"44"},{"size":197,"mtime":1617390979191,"results":"76","hashOfConfig":"44"},{"size":485,"mtime":1617378929640,"results":"77","hashOfConfig":"44"},{"size":6614,"mtime":1617390783729,"results":"78","hashOfConfig":"44"},{"size":210,"mtime":1617390307640,"results":"79","hashOfConfig":"44"},{"size":3135,"mtime":1617390736649,"results":"80","hashOfConfig":"44"},{"size":1092,"mtime":1617390690344,"results":"81","hashOfConfig":"44"},{"size":442,"mtime":1616508019582,"results":"82","hashOfConfig":"44"},{"size":6498,"mtime":1617390947912,"results":"83","hashOfConfig":"44"},{"size":206,"mtime":1617390188036,"results":"84","hashOfConfig":"44"},{"size":2795,"mtime":1617390974508,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"11cf2xb",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"88"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"88"},"/home/roman/Documentos/Repo/dinoworld/src/index.js",[],["177","178"],"/home/roman/Documentos/Repo/dinoworld/src/App.js",[],"/home/roman/Documentos/Repo/dinoworld/src/layout/Navbar.js",[],"/home/roman/Documentos/Repo/dinoworld/src/layout/Footer.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Home.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/TopDinos.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Dino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/Table.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/CardGame.js",["179"],"import CardGameComponent from \"../components/CardGameComponent/CardGameComponent\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { urlApi, DinoContext } from \"../App\";\n\nexport default function CardGame() {\n  const { jwt } = useContext(DinoContext);\n\n  const [newGame, setNewGame] = useState(false);\n  const [dinos, setDinos] = useState([]);\n  const [visibleDinos, setVisibleDinos] = useState([]);\n  const [finishedDinos, setFinishedDinos] = useState([]);\n  const [winner, setWinner] = useState(false);\n\n  //Check clicked dinos for match\n  const checkForMatch = (firstIndex, secondIndex) => {\n    //IF indexes doesn't match and dinos name are equal set finished dinos with that indexes\n    if (\n      firstIndex !== secondIndex &&\n      dinos[firstIndex].name === dinos[secondIndex].name\n    ) {\n      setFinishedDinos([...finishedDinos, firstIndex, secondIndex]);\n    } else {\n      //if name doesn't match with interval we set visible dinos to an empty array\n      setTimeout(() => {\n        setVisibleDinos([]);\n      }, 1000);\n    }\n  };\n\n  //With fetch we get only favourite dinos of user that is logged\n  useEffect(() => {\n    fetch(`${urlApi}/favorite/`, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      }\n    })\n      .then(response => response.json())\n      .then(dinos => {\n        const newList = dinos.map(dino => {\n          return {\n            id: dino.ID,\n            name: dino.name,\n            img: dino.img\n          };\n        });\n        setDinos(\n          newList\n            .concat(\n              // Using concat method on a new list of dinos we dublicate every dino in the array\n              newList.map(dino => {\n                // console.log(newList);\n\n                return {\n                  ...dino,\n                  id: dino.id + \"1\" //change id property by adding a \"1\" for dublicated dinos\n                };\n              })\n            )\n            .sort(() => {\n              //With sort method we make a random list of dinos every time we begin a new game\n              return 0.5 - Math.random();\n            })\n        );\n      })\n      .catch(err => console.log(err));\n  }, [jwt, newGame]);\n\n  //With useEffect ckeck if all dinos have been finished(opened) and finish the game by setting winner to true\n  useEffect(() => {\n    if (finishedDinos.length > 0 && finishedDinos.length === dinos.length) {\n      setWinner(true);\n    }\n  }, [finishedDinos]);\n\n  return (\n    <div>\n      <div className=\"text-center p-4 d-flex flex-column\">\n        <button\n          onClick={() => {\n            setNewGame(!newGame);\n            setVisibleDinos([]);\n            setFinishedDinos([]);\n            setWinner(false);\n          }}\n          className=\"btn btn-warning mb-4\"\n        >\n          New Game\n        </button>\n        <div>\n          <CardGameComponent\n            dinos={dinos}\n            visibleDinos={visibleDinos}\n            setVisibleDinos={setVisibleDinos}\n            finishedDinos={finishedDinos}\n            checkForMatch={checkForMatch}\n          />\n          {/* If winner is true return a div with congratulation */}\n          {winner && <h1>You Win!</h1>}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/roman/Documentos/Repo/dinoworld/src/pages/Favourite.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/FormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/FormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/EditDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/TopDinosComponent/TopDinosComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/DinoComponent/DinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/TableComponent/TableComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponent/CardGameComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FavouriteComponent/FavouriteComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogInComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUpComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/HomeComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccessLogIn.js",["180"],"import React from \"react\";\nimport Swal from \"sweetalert2\";\nimport Home from \"../../pages/Home\";\n\nfunction FormSuccessLogIn({ values }) {\n  // Swal.fire(`Welcome USER`);\n\n  // console.log(values);\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default FormSuccessLogIn;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/FormSuccess.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/HomeComponent/PaginationComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/DinoCardComponent/DinoCardComponent.js",["181"],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormLogIn.js",["182"],"import { useState, useEffect } from \"react\";\n// import jwt_decode from \"jwt-decode\";\nimport { urlApi } from \"../../App\";\nimport { DinoContext } from \"../../App\";\nimport { useContext } from \"react\";\n\n//Creating a custom hook for form validation\n\nconst useForm = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    username: \"\",\n    password: \"\"\n  });\n\n  const { setJwt } = useContext(DinoContext);\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n    const currentErrors = validateForm(values);\n    setErrors(currentErrors);\n\n    if (currentErrors.password || currentErrors.username) {\n      return;\n    }\n    setIsSubmitting(true);\n    // console.log(values);\n\n    fetch(`${urlApi}/login`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(\"Respuesta: \", response);\n          if (response.code === 401) {\n            alert(\"Invalid email or password\"); // Need to add some validation here\n          } else {\n            localStorage.setItem(\"mitoken\", response.token);\n            // const decoded = jwt_decode(response.token);\n\n            setJwt(response.token);\n          }\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useForm;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormLogIn.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/useFormSignUp.js",["183"],"import { useState, useEffect } from \"react\";\nimport { urlApi } from \"../../App\";\n// import jwt_decode from \"jwt-decode\";\n\n//Creating a custom hook for form validation\n\nconst useFormSignUp = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    name: \"\",\n    lastname: \"\",\n    birthdate: \"\",\n    username: \"\",\n    password: \"\",\n    passwordConfirm: \"\"\n  });\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    setErrors(validateForm(values));\n    setIsSubmitting(true);\n\n    console.log(values);\n\n    fetch(`${urlApi}/register/user`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormSignUp;\n","/home/roman/Documentos/Repo/dinoworld/src/components/FormComponents/validateFormSignUp.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/CardGameComponent/DinoCardGameComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/pages/AddDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/EditDinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/EditDinoForm.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/FormSuccessEditDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/useFormEditDino.js",["184"],"import { useState, useEffect, useContext } from \"react\";\nimport { urlApi, DinoContext } from \"../../App\";\nimport { useParams } from \"react-router-dom\";\n\n//Creating a custom hook for form validation\n\nconst useFormEditDino = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    name: \"\",\n    weight: \"\",\n    height: \"\",\n    lenght: \"\",\n    top_speed: \"\",\n    period: \"\",\n    diet: \"\",\n    continent: \"\",\n    top: \"\",\n    info: \"\",\n    img: []\n  });\n\n  const { ID } = useParams();\n\n  // const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    fetch(`${urlApi}/dinosaur/${ID}`)\n      .then(resp => resp.json())\n      .then(resp => {\n        setValues(resp);\n        // setIsLoaded(true);\n      })\n      .catch(err => console.log(err));\n  }, [ID]);\n\n  console.log(values);\n\n  const { jwt } = useContext(DinoContext);\n\n  //\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  //Handlind form inserts and set them to the values\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  //Handling inserted file (img)\n\n  const handleFile = e => {\n    // console.log(values);\n    // console.log(e.target);\n    const { name, files } = e.target;\n    // console.log(name, files);\n    setValues({\n      ...values,\n      [name]: files[0]\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    const currentErrors = validateForm(values);\n    setErrors(currentErrors);\n\n    //Check if object of values have some errors, is so we stop executing handle submit function\n    if (Object.values(currentErrors).some(error => error)) {\n      return;\n    }\n\n    setErrors(validateForm(values));\n    setIsSubmitting(true);\n\n    const formData = new FormData();\n    formData.append(\"name\", values.name);\n    formData.append(\"weight\", values.weight);\n    formData.append(\"height\", values.height);\n    formData.append(\"lenght\", values.lenght);\n    formData.append(\"top_speed\", values.top_speed);\n    formData.append(\"period\", values.period);\n    formData.append(\"diet\", values.diet);\n    formData.append(\"continent\", values.continent);\n    formData.append(\"top\", values.top);\n    formData.append(\"info\", values.info);\n    formData.append(\"img\", values.img);\n\n    console.log(formData);\n\n    fetch(`${urlApi}/dinosaur/edit/${ID}`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      },\n      body: formData\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleFile, handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormEditDino;\n","/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/validateForm.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/AddDinoComponent.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/AddDinoForm.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/FormSuccessAddDino.js",[],"/home/roman/Documentos/Repo/dinoworld/src/components/EditDinoComponent/useFormAddDino.js",["185"],"import { useState, useEffect, useContext } from \"react\";\n\nimport { urlApi, DinoContext } from \"../../App\";\n\n//Creating a custom hook for form validation\n\nconst useFormAddDino = (callback, validateForm) => {\n  const [values, setValues] = useState({\n    name: \"\",\n    weight: \"\",\n    height: \"\",\n    lenght: \"\",\n    top_speed: \"\",\n    period: \"1\",\n    diet: \"1\",\n    continent: \"1\",\n    top: \"0\",\n    info: \"\",\n    img: []\n  });\n\n  const { jwt } = useContext(DinoContext);\n\n  const [errors, setErrors] = useState({});\n\n  //Assign isSubmitteng to false before handleSubmit is processed\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  //Handlind form inserts and set them to the values\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  console.log(values);\n\n  //Handling inserted file (img)\n\n  const handleFile = e => {\n    // console.log(values);\n    // console.log(e.target);\n    const { name, files } = e.target;\n    // console.log(name, files);\n    setValues({\n      ...values,\n      [name]: files[0]\n    });\n  };\n\n  const handleSubmit = e => {\n    //Prevent default refresh when submitting a form\n\n    e.preventDefault();\n\n    const currentErrors = validateForm(values);\n    setErrors(currentErrors);\n\n    //Check if object of values have some errors, is so we  executing handle submit function\n    if (Object.values(currentErrors).some(error => error)) {\n      return;\n    }\n\n    console.log(values);\n\n    // setErrors(validateForm(values));\n    setIsSubmitting(true);\n\n    const formData = new FormData();\n    formData.append(\"name\", values.name);\n    formData.append(\"weight\", values.weight);\n    formData.append(\"height\", values.height);\n    formData.append(\"lenght\", values.lenght);\n    formData.append(\"top_speed\", values.top_speed);\n    formData.append(\"period\", values.period);\n    formData.append(\"diet\", values.diet);\n    formData.append(\"continent\", values.continent);\n    formData.append(\"top\", values.top);\n    formData.append(\"info\", values.info);\n    formData.append(\"img\", values.img);\n\n    console.log(formData);\n\n    fetch(`${urlApi}/register/dinosaur`, {\n      method: \"POST\",\n      cors: \"CORS\",\n      headers: {\n        Authorization: \"Bearer \" + jwt\n      },\n      body: formData\n    }).then(response =>\n      response\n        .json()\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => console.log(\"Erorr: \", error))\n    );\n  };\n\n  //Check if there are not errors and if not then return isSubmitting\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return { handleFile, handleChange, values, handleSubmit, errors };\n};\n\nexport default useFormAddDino;\n",{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":75,"column":6,"nodeType":"192","endLine":75,"endColumn":21,"suggestions":"193"},{"ruleId":"194","severity":1,"message":"195","line":2,"column":8,"nodeType":"196","messageId":"197","endLine":2,"endColumn":12},{"ruleId":"194","severity":1,"message":"198","line":5,"column":8,"nodeType":"196","messageId":"197","endLine":5,"endColumn":18},{"ruleId":"190","severity":1,"message":"199","line":73,"column":6,"nodeType":"192","endLine":73,"endColumn":14,"suggestions":"200"},{"ruleId":"190","severity":1,"message":"199","line":63,"column":6,"nodeType":"192","endLine":63,"endColumn":14,"suggestions":"201"},{"ruleId":"190","severity":1,"message":"199","line":122,"column":6,"nodeType":"192","endLine":122,"endColumn":14,"suggestions":"202"},{"ruleId":"190","severity":1,"message":"199","line":109,"column":6,"nodeType":"192","endLine":109,"endColumn":14,"suggestions":"203"},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dinos.length'. Either include it or remove the dependency array.","ArrayExpression",["206"],"no-unused-vars","'Swal' is defined but never used.","Identifier","unusedVar","'jwt_decode' is defined but never used.","React Hook useEffect has missing dependencies: 'callback' and 'isSubmitting'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["207"],["208"],["209"],["210"],"no-global-assign","no-unsafe-negation",{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"213","fix":"215"},{"desc":"213","fix":"216"},{"desc":"213","fix":"217"},"Update the dependencies array to be: [dinos.length, finishedDinos]",{"range":"218","text":"219"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"220","text":"221"},{"range":"222","text":"221"},{"range":"223","text":"221"},{"range":"224","text":"221"},[2462,2477],"[dinos.length, finishedDinos]",[1858,1866],"[callback, errors, isSubmitting]",[1445,1453],[3018,3026],[2679,2687]]